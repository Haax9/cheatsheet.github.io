<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Applicative Scans on Offensive Security Cheatsheet</title>
    <link>/web-pentest/applicative-scans/</link>
    <description>Recent content in Applicative Scans on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/web-pentest/applicative-scans/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Application Scans</title>
      <link>/web-pentest/applicative-scans/web_application_scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/web_application_scan/</guid>
      <description>API Endpoints wordlist https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d Nikto # For web applications, you can use nikto to identify potential vulnerabilities # Not very stealth # Think about changing the default user agent ! nitko -h http://monsite.com -o output.xml -Format [csv, xml, html, txt] Whatweb # Whatweb is another scanning tool for web applications $ whatweb -h $ whatweb -l # Liste les plugins $ whatweb www.monsite.com $ whatweb www.monsite.com -v $ whatweb www.monsite.com -a 1 # Stealhty $ whatweb www.</description>
    </item>
    
    <item>
      <title>Aquatone</title>
      <link>/web-pentest/applicative-scans/aquatone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/aquatone/</guid>
      <description>Aquatone # Aquatone is a complete tool separate in three commands to make complete recon # Collector modules : # Dictionary brute force # DNSDB.org # Google Transparency Report # HackerTarget # Netcraft # Shodan (API key needed) # ThreatCrowd # VirusTotal (API key needed) # PHASE 1 : Discovery # aquatone-discover is the first step # It uses name servers and performs some test to see if wildcard is configured # Then it asks each subdomain collector for potential subdomain # Then it tries to resolve them to see which ones are up and creates the hosts.</description>
    </item>
    
    <item>
      <title>VHOST Scanning</title>
      <link>/web-pentest/applicative-scans/vhost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/vhost/</guid>
      <description>Virtual Host Scanner # Basic HTTP Scanner that&amp;#39;ll enumerate virtual hosts on a given IP # It may reveal hidden hosts # Docker ?  ruby scan.rb --ip=192.168.1.101 --host=domain.tld # Options --ignore-http-codes --ignore-content-length --port --- If running on another port --wordlist --- specify an alternative location for the wordlist file --ssl --- on/off depending if you want to connect to HTTP --output --- output file </description>
    </item>
    
    <item>
      <title>Web Application Firewall (WAF)</title>
      <link>/web-pentest/applicative-scans/web_application_firewall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/web_application_firewall/</guid>
      <description>General Testing - WAFW00F (https://github.com/EnableSecurity/wafw00f) # Simple tool used to identify and fingerprint WAF # Sends a normal HTTP request and analyses the response; this identifies a number of WAF solutions # If that is not successful, it sends a number of (potentially malicious) HTTP requests and uses simple logic to deduce which WAF it is # If that is also not successful, it analyses the responses previously returned and uses another  # simple algorithm to guess if a WAF or security solution is actively responding to our attacks .</description>
    </item>
    
  </channel>
</rss>
