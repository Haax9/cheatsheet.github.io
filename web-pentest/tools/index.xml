<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Offensive Security Cheatsheet</title>
    <link>/web-pentest/tools/</link>
    <description>Recent content in Tools on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/web-pentest/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BurpSuite</title>
      <link>/web-pentest/tools/burpsuite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/burpsuite/</guid>
      <description>WORK IN PROGRESS Notes / Tips # /!\ HTTP POST Requests needs two carriage return at the end to be valid ! # Firefox sends an HTTP GET every 60s to hxxp://detectportal.firefox.com. To avoid : about:config &amp;gt; network.captive-portal-service.enabled ==&amp;gt; false Modules / Addons # Autorize # For Each Request you do, it will send an equal request # But with changed cookies of the session or any additional header used for authorization.</description>
    </item>
    
    <item>
      <title>Postman</title>
      <link>/web-pentest/tools/postman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/postman/</guid>
      <description>https://www.guru99.com/postman-tutorial.html https://openclassrooms.com/fr/courses/4668056-construisez-des-microservices/5123020-testez-votre-api-grace-a-postman https://www.toolsqa.com/postman-tutorial/ https://amethyste16.wordpress.com/2016/02/24/tutoriel-postman/ User Interface Header # Import --&amp;gt; Used to import collection or environment. # Runner --&amp;gt; Automation tests can be executed through the Collection Runner. # Workspace --&amp;gt; You can divide work using workspaces Sidebar # History --&amp;gt; Past requests that you have sent will be displayed in History. # This makes it easy to track actions that you have done. # Organize --&amp;gt; your test suite by creating collections.</description>
    </item>
    
    <item>
      <title>ffuf</title>
      <link>/web-pentest/tools/ffuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/ffuf/</guid>
      <description>Resources / Notes # A fast web fuzzer written in Go. https://github.com/ffuf/ffuf Typical commands &amp;amp; Usage # Directory discovery ffuf -w /path/to/wordlist -u https://target/FUZZ # Adding classical header (some WAF bypass) ffuf -c -w &amp;#34;/opt/host/main.txt:FILE&amp;#34; -H &amp;#34;X-Originating-IP: 127.0.0.1, X-Forwarded-For: 127.0.0.1, X-Remote-IP: 127.0.0.1, X-Remote-Addr: 127.0.0.1, X-Client-IP: 127.0.0.1&amp;#34; -fs 5682,0 -u https://target/FUZZ # match all responses but filter out those with content-size 42 ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz Host-header, match HTTP 200 responses.</description>
    </item>
    
    <item>
      <title>nuclei</title>
      <link>/web-pentest/tools/nuclei/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/nuclei/</guid>
      <description>Resources https://nuclei.projectdiscovery.io/ https://github.com/projectdiscovery/nuclei-templates Usage and Examples Targets and settings # Templates nuclei -t exposures/configs/git-config.yaml -l urls.txt nuclei -t cves/2021/ -l urls.txt nuclei -t cves/2020/ -t exposed-tokens -t misconfiguration -l urls.txt # Tags nuclei -tags cve -u urls.txt nuclei -tags config -t exposures/ -u urls.txt nuclei -tags lfi,ssrf,rce -t cves/ -l urls.txt # Workflows nuclei -w workflows/wordpress-workflow.yaml -l wordpress_urls.txt nuclei -w workflows/wordpress-workflow.yaml -w workflows/jira-workflow.yaml -l urls.txt # Severity nuclei -t cves/ -severity critical -l urls.</description>
    </item>
    
  </channel>
</rss>
